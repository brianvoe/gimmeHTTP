{"version":3,"file":"gimmehttp.iife.js","sources":["../src/gimmehttp/utils/registry.ts","../src/gimmehttp/utils/generate.ts","../src/gimmehttp/utils/builder.ts","../src/gimmehttp/utils/utils.ts","../src/gimmehttp/clients/c.libcurl.ts","../src/gimmehttp/clients/csharp.http.ts","../src/gimmehttp/clients/csharp.restsharp.ts","../src/gimmehttp/clients/dart.http.ts","../src/gimmehttp/clients/go.ts","../src/gimmehttp/clients/java.httpurlconnection.ts","../src/gimmehttp/clients/java.okhttp.ts","../src/gimmehttp/clients/js.fetch.ts","../src/gimmehttp/clients/js.axios.ts","../src/gimmehttp/clients/js.jquery.ts","../src/gimmehttp/clients/kotlin.ktor.ts","../src/gimmehttp/clients/node.http.ts","../src/gimmehttp/clients/node.fetch.ts","../src/gimmehttp/clients/php.curl.ts","../src/gimmehttp/clients/php.guzzle.ts","../src/gimmehttp/clients/python.http.ts","../src/gimmehttp/clients/python.requests.ts","../src/gimmehttp/clients/ruby.nethttp.ts","../src/gimmehttp/clients/ruby.faraday.ts","../src/gimmehttp/clients/rust.reqwest.ts","../src/gimmehttp/clients/shell.curl.ts","../src/gimmehttp/clients/swift.nsurlsession.ts","../src/gimmehttp/index.ts","../src/gimmehttp/index.umd.ts"],"sourcesContent":["export interface Client {\n  default?: boolean\n  language: string\n  client: string\n  generate: (config: any, http: any) => string\n}\n\nconst clients: Client[] = []\n\nexport function Clients(): Client[] {\n  return clients\n}\n\nexport function Languages(): string[] {\n  // return all unque languages\n  return clients.map((c) => c.language).filter((v, i, a) => a.indexOf(v) === i)\n}\n\n// Search for client, whether or not they pass in a client\n// If no client, return the default client of that language\nexport function Search(language: string, client?: string): Client | null {\n  if (language === '' || language === undefined) {\n    return null\n  }\n\n  // Loop through and get all clients for the language\n  const clientsFilter = clients.filter((c) => c.language.toLowerCase() === language.toLowerCase())\n  if (clientsFilter.length === 0) {\n    return null\n  }\n\n  // Get default client\n  const defaultClient: Client = clientsFilter.find((c) => c.default) || clientsFilter[0]\n\n  // If no client, return default\n  if (!client) {\n    return defaultClient\n  }\n\n  // If client, return the client\n  const clientResult = clientsFilter.find((c) => c.client.toLowerCase() === client.toLowerCase())\n  if (!clientResult) {\n    return defaultClient\n  }\n\n  return clientResult\n}\n\nexport function SetDefault(language: string, client: string): void {\n  const clientResult = Search(language, client)\n  if (!clientResult) {\n    return\n  }\n\n  // Set the client as default\n  clientResult.default = true\n}\n\nexport function Register(client: Client | Client[]): Error | null {\n  if (!client) {\n    return new Error('Client is required')\n  }\n\n  // Register multiple clients\n  if (Array.isArray(client)) {\n    client.forEach((g) => Register(g))\n    return null\n  }\n\n  // Get current list of clients from client.language\n  const curClients = clients.filter((c) => c.language.toLowerCase() === client.language.toLowerCase())\n  const exists = curClients.find((c) => c.client.toLowerCase() === client.client.toLowerCase())\n\n  // Set default to false if undefined\n  if (client.default === undefined) {\n    client.default = curClients.length === 0 ? true : false\n  }\n\n  // If it exist, overwrite the client\n  if (exists) {\n    const index = clients.indexOf(client)\n    clients[index] = client\n    return null\n  }\n\n  // otherwise, add the client\n  clients.push(client)\n\n  return null\n}\n\nexport function ClearRegistry(): void {\n  clients.splice(0, clients.length)\n}\n","import { Search } from './registry'\n\nexport type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\nexport interface Settings {\n  language?: string\n  client?: string\n\n  config?: Config\n  http: Http\n}\n\n// The outcome of the generated code\n// or an error message\nexport interface Outcome {\n  error?: string\n\n  language?: string // if set by default\n  client?: string // if set by default\n  code?: string\n}\n\nexport interface Config {\n  // The character(s) to use for indentation\n  indent?: string // default: '  '\n\n  // The character(s) to use for joining lines\n  join?: string // default: '\\n'\n\n  // Whether or not to handle errors in the generated code\n  // default: false to help keep the generated code simple by default\n  handleErrors?: boolean // default: false\n}\n\nexport interface Http {\n  method: Method\n  url: string\n  params?: { [key: string]: string | string[] }\n  headers?: { [key: string]: string | string[] }\n  cookies?: { [key: string]: string }\n  body?: any\n}\n\nexport function Generate(req: Settings): Outcome {\n  let err = validate(req)\n  if (err) {\n    return { error: err.message }\n  }\n\n  // Set default values for config\n  req.config = setConfig(req.config)\n\n  // Set default language if not set\n  if (!req.language) {\n    req.language = 'javascript' // I know, I know, but I have to pick a default\n  }\n\n  // Search for client, grab default if not found\n  const client = Search(req.language, req.client)\n  if (!client) {\n    return { error: 'Client not found' }\n  }\n\n  // Generate the code\n  const code = client.generate(req.config, req.http)\n\n  return {\n    language: client.language,\n    client: client.client,\n    code: code\n  } as Outcome\n}\n\nfunction validate(req: Settings): Error | undefined {\n  if (!req) {\n    return new Error('Request is required')\n  }\n\n  if (!req.http) {\n    return new Error('http is required')\n  }\n\n  if (!req.http.method) {\n    return new Error('http.method is required')\n  }\n\n  if (!req.http.url) {\n    return new Error('http.url is required')\n  }\n\n  return undefined\n}\n\nfunction setConfig(config: Config | undefined): Config {\n  config = config || {}\n\n  if (config.handleErrors === undefined) {\n    config.handleErrors = false\n  }\n\n  return config\n}\n","export interface BuilderOptions {\n  indent?: string\n  join?: string\n\n  // JSON options\n  json?: JSON\n}\n\nexport interface Line {\n  depth: number\n  line: string\n}\n\nexport interface JSON {\n  objOpen: string\n  objClose: string\n  arrOpen: string\n  arrClose: string\n  separator: string\n  endComma?: boolean // Add comma at end of object or array\n}\n\nexport class Builder {\n  private code: Line[] = []\n  private indentChar: string\n  private lineJoin: string\n  private currentDepth: number = 0\n\n  private jsonConfig: JSON = {\n    objOpen: '{',\n    objClose: '}',\n    arrOpen: '[',\n    arrClose: ']',\n    separator: ': ',\n    endComma: false\n  }\n\n  constructor(options: BuilderOptions = {}) {\n    this.indentChar = options.indent || '  '\n    this.lineJoin = options.join || '\\n'\n    this.jsonConfig = options.json || this.jsonConfig\n  }\n\n  public getIndent(): string {\n    return this.indentChar\n  }\n\n  public getJoin(): string {\n    return this.lineJoin\n  }\n\n  public line(line: string = ''): void {\n    // dont indent empty lines\n    this.code.push({ depth: line === '' ? 0 : this.currentDepth, line })\n  }\n\n  public append(line: string): void {\n    if (this.code.length > 0) {\n      this.code[this.code.length - 1].line += line\n    } else {\n      this.line(line)\n    }\n  }\n\n  public json(json: any, isSub: boolean = false): void {\n    if (!json) {\n      this.append('null')\n      return\n    }\n\n    switch (typeof json) {\n      case 'object':\n        if (Array.isArray(json)) {\n          this.append(this.jsonConfig.arrOpen)\n          this.indent()\n          json.forEach((item, index) => {\n            this.json(item, typeof json === 'object' || Array.isArray(json))\n\n            // Add comma if not last item\n            if (index < json.length - 1 || this.jsonConfig.endComma) {\n              this.append(',')\n            }\n          })\n          this.outdent()\n          this.line(this.jsonConfig.arrClose)\n        } else {\n          this.append(this.jsonConfig.objOpen)\n          this.indent()\n          const keys = Object.keys(json)\n          keys.forEach((key, index) => {\n            // Set key\n            this.line(`\"${key}\"` + this.jsonConfig.separator)\n            this.json(json[key], typeof key === 'object' || Array.isArray(key))\n\n            // Add comma if not last key\n            if (index < keys.length - 1 || this.jsonConfig.endComma) {\n              this.append(',')\n            }\n          })\n          this.outdent()\n          this.line(this.jsonConfig.objClose)\n        }\n        break\n      case 'string':\n        // Wrap string in double quotes\n        if (isSub) {\n          this.line(`\"${json}\"`)\n        } else {\n          this.append(`\"${json}\"`)\n        }\n        break\n      default:\n        if (isSub) {\n          this.line(String(json))\n        } else {\n          this.append(String(json))\n        }\n        break\n    }\n  }\n\n  public indent(): void {\n    this.currentDepth += 1\n  }\n\n  public outdent(): void {\n    if (this.currentDepth > 0) {\n      this.currentDepth -= 1\n    }\n  }\n\n  public output(): string {\n    return this.code\n      .map(({ depth, line }) => `${this.indentChar.repeat(depth)}${line}`)\n      .join(this.lineJoin)\n      .trimEnd()\n  }\n}\n","interface Url {\n  hostname: string\n  path: string\n  port: number\n  protocol: string\n  params: string\n}\n\nexport function ParseUrl(url: string): Url {\n  let hostname, path, port, protocol, params\n\n  try {\n    // Try to parse the URL, using the URL class\n    const parsedUrl = new URL(url)\n    hostname = parsedUrl.hostname\n    path = parsedUrl.pathname\n    params = parsedUrl.search\n    port = parsedUrl.port ? parseInt(parsedUrl.port) : parsedUrl.protocol === 'https:' ? 443 : 80\n    protocol = parsedUrl.protocol\n  } catch (error) {\n    // If the URL is invalid, parse it manually\n    const urlParts = url.split('/')\n    hostname = urlParts[0]\n    const pathAndParams = '/' + urlParts.slice(1).join('/')\n    const [pathPart, paramsPart] = pathAndParams.split('?')\n    path = pathPart\n    params = paramsPart ? '?' + paramsPart : ''\n    port = 80\n    protocol = 'http:'\n  }\n\n  // Ensure path starts with a slash\n  if (!path.startsWith('/')) {\n    path = '/' + path\n  }\n\n  return { hostname, path, port, protocol, params }\n}\n\nexport function IsJsonRequest(method: string, headers?: { [key: string]: string }): boolean {\n  return (\n    method.toUpperCase() === 'POST' &&\n    headers !== undefined &&\n    Object.keys(headers).some(\n      (key) => key.toLowerCase() === 'content-type' && headers[key].toLowerCase() === 'application/json'\n    )\n  )\n}\n\nexport function GetContentType(headers?: { [key: string]: string | string[] }): string {\n  if (!headers) return ''\n\n  // Check for content-type (case-insensitive)\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === 'content-type') {\n      return Array.isArray(value) ? value[0] : value\n    }\n  }\n\n  // Check for accept header as fallback\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === 'accept') {\n      return Array.isArray(value) ? value[0] : value\n    }\n  }\n\n  return ''\n}\n\nexport function HasBody(body: any): boolean {\n  if (!body) return false\n\n  if (typeof body === 'string') {\n    return body.length > 0\n  }\n\n  if (typeof body === 'object') {\n    return Object.keys(body).length > 0\n  }\n\n  return false\n}\n\nexport function IsStringBody(body: any): boolean {\n  return typeof body === 'string'\n}\n\nexport function IsObjectBody(body: any): boolean {\n  return body !== null && body !== undefined && typeof body === 'object'\n}\n\nexport function ContentTypeIncludes(contentType: string, type: 'json' | 'xml' | 'form' | 'text' | 'blob'): boolean {\n  const lower = contentType.toLowerCase()\n\n  switch (type) {\n    case 'json':\n      return lower.includes('application/json')\n    case 'xml':\n      return lower.includes('application/xml') || lower.includes('text/xml')\n    case 'form':\n      return lower.includes('application/x-www-form-urlencoded')\n    case 'text':\n      return lower.includes('text/')\n    case 'blob':\n      return lower.includes('application/octet-stream') || lower.includes('image/')\n    default:\n      return false\n  }\n}\n\nexport function InferContentType(body: any): string {\n  if (!body) return 'application/octet-stream'\n\n  // If it's a string, check if it looks like JSON\n  if (typeof body === 'string') {\n    const trimmed = body.trim()\n    if (trimmed.startsWith('{') || trimmed.startsWith('[')) {\n      return 'application/json'\n    }\n    // Check if it's printable UTF-8 text\n    // For simplicity, assume non-empty strings are text\n    if (trimmed.length > 0) {\n      return 'text/plain; charset=utf-8'\n    }\n    return 'application/octet-stream'\n  }\n\n  // If it's an object, assume JSON\n  if (typeof body === 'object') {\n    return 'application/json'\n  }\n\n  // Default to binary\n  return 'application/octet-stream'\n}\n\nexport function GetEffectiveContentType(\n  headers?: { [key: string]: string | string[] },\n  body?: any\n): { contentType: string; wasInferred: boolean } {\n  const explicit = GetContentType(headers)\n\n  if (explicit) {\n    return { contentType: explicit, wasInferred: false }\n  }\n\n  // No explicit Content-Type, infer from body\n  const inferred = InferContentType(body)\n  return { contentType: inferred, wasInferred: true }\n}\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'c',\n  client: 'libcurl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('#include <stdio.h>')\n    builder.line('#include <curl/curl.h>')\n    builder.line()\n    builder.line('int main(void) {')\n    builder.indent()\n    builder.line('CURL *curl;')\n    builder.line('CURLcode res;')\n    builder.line()\n    builder.line('curl_global_init(CURL_GLOBAL_DEFAULT);')\n    builder.line('curl = curl_easy_init();')\n    builder.line('if(curl) {')\n    builder.indent()\n\n    // Build URL with parameters using multi-line string concatenation\n    if (http.params && Object.keys(http.params).length > 0) {\n      const params = new URLSearchParams()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            params.append(key, val)\n          }\n        } else {\n          params.append(key, value)\n        }\n      }\n      const paramString = params.toString()\n      if (paramString) {\n        const separator = http.url.includes('?') ? '&' : '?'\n        const paramParts = paramString.split('&')\n\n        builder.line('curl_easy_setopt(curl, CURLOPT_URL,')\n        builder.indent()\n        builder.line(`\"${http.url}\"`)\n        builder.line(`\"${separator}${paramParts[0]}\"`)\n        for (let i = 1; i < paramParts.length; i++) {\n          builder.line(`\"&${paramParts[i]}\"`)\n        }\n        builder.outdent()\n        builder.line(');')\n      } else {\n        builder.line(`curl_easy_setopt(curl, CURLOPT_URL, \"${http.url}\");`)\n      }\n    } else {\n      builder.line(`curl_easy_setopt(curl, CURLOPT_URL, \"${http.url}\");`)\n    }\n\n    if (http.method.toUpperCase() === 'POST') {\n      builder.line('curl_easy_setopt(curl, CURLOPT_POST, 1L);')\n    } else if (http.method.toUpperCase() !== 'GET') {\n      builder.line(`curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"${http.method.toUpperCase()}\");`)\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      builder.line('struct curl_slist *headers = NULL;')\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`headers = curl_slist_append(headers, \"${key}: ${val}\");`))\n        } else {\n          builder.line(`headers = curl_slist_append(headers, \"${key}: ${value}\");`)\n        }\n      }\n      builder.line('curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);')\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`curl_easy_setopt(curl, CURLOPT_COOKIE, \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (IsStringBody(http.body)) {\n        builder.line(`curl_easy_setopt(curl, CURLOPT_POSTFIELDS, \"${http.body.replace(/\"/g, '\\\\\"')}\");`)\n      } else {\n        // For objects (JSON or form data), stringify as JSON\n        builder.line('curl_easy_setopt(curl, CURLOPT_POSTFIELDS, R\"(')\n        builder.json(http.body)\n        builder.append(')\");')\n      }\n    }\n\n    builder.line()\n    builder.line('res = curl_easy_perform(curl);')\n    builder.line('if(res != CURLE_OK)')\n    builder.indent()\n    builder.line('fprintf(stderr, \"failed: %s\", curl_easy_strerror(res));')\n    builder.outdent()\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line('curl_slist_free_all(headers);')\n    }\n    builder.line('curl_easy_cleanup(curl);')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n    builder.line('curl_global_cleanup();')\n    builder.line('return 0;')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'csharp',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('using System;')\n    builder.line('using System.Net.Http;')\n    builder.line('using System.Threading.Tasks;')\n    builder.line('using System.Web;')\n    builder.line()\n    builder.line('namespace HttpClientExample')\n    builder.line('{')\n    builder.indent()\n    builder.line('class Program')\n    builder.line('{')\n    builder.indent()\n    builder.line('static async Task Main(string[] args)')\n    builder.line('{')\n    builder.indent()\n    builder.line('using (HttpClient client = new HttpClient())')\n    builder.line('{')\n    builder.indent()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('var uriBuilder = new UriBuilder(\"' + http.url + '\");')\n      builder.line('var query = HttpUtility.ParseQueryString(uriBuilder.Query);')\n\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`query.Add(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`query.Add(\"${key}\", \"${value}\");`)\n        }\n      }\n\n      builder.line('uriBuilder.Query = query.ToString();')\n      builder.line(\n        `HttpRequestMessage request = new HttpRequestMessage(HttpMethod.${http.method.toUpperCase()}, uriBuilder.ToString());`\n      )\n    } else {\n      builder.line(\n        `HttpRequestMessage request = new HttpRequestMessage(HttpMethod.${http.method.toUpperCase()}, \"${http.url}\");`\n      )\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.Headers.Add(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`request.Headers.Add(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request.Headers.Add(\"Cookie\", \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('var formContent = new FormUrlEncodedContent(new Dictionary<string, string>')\n        builder.line('{')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`{ \"${key}\", \"${value}\" },`)\n        }\n        builder.outdent()\n        builder.line('});')\n        builder.line('request.Content = formContent;')\n      } else {\n        // Default to JSON (if content-type is json or not specified)\n        builder.line('request.Content = new StringContent(')\n        builder.json(http.body)\n        builder.append(', System.Text.Encoding.UTF8, \"application/json\");')\n      }\n    }\n\n    builder.line()\n    builder.line('HttpResponseMessage response = await client.SendAsync(request);')\n    builder.line('response.EnsureSuccessStatusCode();')\n    builder.line('string responseBody = await response.Content.ReadAsStringAsync();')\n    builder.line('Console.WriteLine(responseBody);')\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes, IsStringBody } from '../utils/utils'\n\nexport default {\n  language: 'csharp',\n  client: 'restsharp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('using RestSharp;')\n    if (config.handleErrors) {\n      builder.line('using System;')\n    }\n    builder.line()\n    builder.line('namespace RestSharpExample')\n    builder.line('{')\n    builder.indent()\n    builder.line('class Program')\n    builder.line('{')\n    builder.indent()\n    builder.line('static void Main(string[] args)')\n    builder.line('{')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try')\n      builder.line('{')\n      builder.indent()\n    }\n\n    builder.line(`var client = new RestClient(\"${http.url}\");`)\n    builder.line(`var request = new RestRequest(Method.${http.method.toUpperCase()});`)\n\n    // Add URL parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`request.AddParameter(\"${key}\", \"${val}\", ParameterType.QueryString);`)\n          }\n        } else {\n          builder.line(`request.AddParameter(\"${key}\", \"${value}\", ParameterType.QueryString);`)\n        }\n      }\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.AddHeader(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`request.AddHeader(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request.AddHeader(\"Cookie\", \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('request.AddParameter(\"application/x-www-form-urlencoded\", ')\n        builder.json(http.body)\n        builder.append(', ParameterType.RequestBody);')\n      } else if (IsStringBody(http.body)) {\n        builder.line(\n          `request.AddParameter(\"${contentType || 'text/plain'}\", \"${http.body.replace(/\"/g, '\\\\\"')}\", ParameterType.RequestBody);`\n        )\n      } else {\n        // Default to JSON\n        builder.line('request.AddJsonBody(')\n        builder.json(http.body)\n        builder.append(');')\n      }\n    }\n\n    builder.line()\n    builder.line('IRestResponse response = client.Execute(request);')\n    builder.line('Console.WriteLine(response.Content);')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('}')\n      builder.line('catch (Exception ex)')\n      builder.line('{')\n      builder.indent()\n      builder.line('Console.WriteLine($\"Error: {ex.Message}\");')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'dart',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n    const needsJsonEncode =\n      hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n\n    builder.line(\"import 'package:http/http.dart' as http;\")\n    if (needsJsonEncode) {\n      builder.line(\"import 'dart:convert';\")\n    }\n    builder.line()\n\n    builder.line('void main() async {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(\"var url = Uri.parse('\" + http.url + \"').replace(queryParameters: {\")\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`'${key}': [${value.map((v) => `'${v}'`).join(', ')}],`)\n        } else {\n          builder.line(`'${key}': '${value}',`)\n        }\n      }\n      builder.outdent()\n      builder.line('});')\n    } else {\n      builder.line(`var url = Uri.parse('${http.url}');`)\n    }\n    builder.line()\n\n    // Build headers map\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line('var headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`'${key}': '${value.join(', ')}',`)\n        } else {\n          builder.line(`'${key}': '${value}',`)\n        }\n      }\n      builder.outdent()\n      builder.line('};')\n      builder.line()\n    }\n\n    // Build body\n    let bodyVar = 'null'\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('var body = jsonEncode(')\n        builder.json(http.body)\n        builder.append(');')\n        bodyVar = 'body'\n        builder.line()\n      } else if (IsStringBody(http.body)) {\n        builder.line(`var body = '${http.body.replace(/'/g, \"\\\\'\")}';`)\n        bodyVar = 'body'\n        builder.line()\n      }\n    }\n\n    // Make request\n    const method = http.method.toLowerCase()\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n\n    if (method === 'get') {\n      builder.line(`var response = await http.get(url${hasHeaders ? ', headers: headers' : ''});`)\n    } else if (method === 'post') {\n      builder.line(\n        `var response = await http.post(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'put') {\n      builder.line(\n        `var response = await http.put(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'delete') {\n      builder.line(\n        `var response = await http.delete(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'patch') {\n      builder.line(\n        `var response = await http.patch(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    }\n\n    builder.line()\n    builder.line('print(response.body);')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (e) {')\n      builder.indent()\n      builder.line('print(\"Error: $e\");')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'go',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n',\n\n      json: {\n        objOpen: 'map[string]any{',\n        objClose: '}',\n        arrOpen: '[]any{',\n        arrClose: '}',\n        separator: ': ',\n        endComma: false\n      }\n    })\n\n    const contentType = GetContentType(http.headers)\n    const hasBody = HasBody(http.body)\n    const isJsonBody =\n      hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n    const isFormBody = hasBody && ContentTypeIncludes(contentType, 'form')\n    const needsBytes = isJsonBody || isFormBody\n\n    builder.line('package main')\n    builder.line()\n    builder.line('import (')\n    builder.indent()\n    builder.line('\"fmt\"')\n    builder.line('\"net/http\"')\n    builder.line('\"io\"')\n    if (needsBytes) {\n      builder.line('\"bytes\"')\n    }\n    if (isJsonBody) {\n      builder.line('\"encoding/json\"')\n    }\n    if (isFormBody || (http.params && Object.keys(http.params).length > 0)) {\n      builder.line('\"net/url\"')\n    }\n    if (config.handleErrors) {\n      builder.line('\"log\"')\n    }\n    builder.outdent()\n    builder.line(')')\n    builder.line()\n    builder.line('func main() {')\n    builder.indent()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(`baseURL := \"${http.url}\"`)\n      builder.line('u, err := url.Parse(baseURL)')\n      if (config.handleErrors) {\n        builder.line('if err != nil {')\n        builder.indent()\n        builder.line('log.Fatal(err)')\n        builder.outdent()\n        builder.line('}')\n      }\n      builder.line('q := u.Query()')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`q.Add(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`q.Set(\"${key}\", \"${value}\")`)\n        }\n      }\n      builder.line('u.RawQuery = q.Encode()')\n      builder.line('url := u.String()')\n    } else {\n      builder.line(`url := \"${http.url}\"`)\n    }\n    builder.line()\n\n    let bodyVar = 'nil'\n    if (isJsonBody) {\n      builder.line('jsonBodyMap := ')\n      builder.json(http.body)\n\n      if (config.handleErrors) {\n        builder.line('jsonBodyBytes, err := json.Marshal(jsonBodyMap)')\n        builder.line('if err != nil {')\n        builder.indent()\n        builder.line('log.Fatal(err)')\n        builder.outdent()\n        builder.line('}')\n      } else {\n        builder.line('jsonBodyBytes, _ := json.Marshal(jsonBodyMap)')\n      }\n      bodyVar = 'bytes.NewBuffer(jsonBodyBytes)'\n      builder.line()\n    } else if (isFormBody) {\n      builder.line('formData := url.Values{}')\n      for (const [key, value] of Object.entries(http.body)) {\n        builder.line(`formData.Set(\"${key}\", \"${value}\")`)\n      }\n      builder.line('formBody := formData.Encode()')\n      bodyVar = 'bytes.NewBufferString(formBody)'\n      builder.line()\n    } else if (hasBody && typeof http.body === 'string') {\n      bodyVar = `bytes.NewBufferString(\"${http.body.replace(/\"/g, '\\\\\"')}\")`\n    }\n\n    if (config.handleErrors) {\n      builder.line(`req, err := http.NewRequest(\"${http.method.toUpperCase()}\", url, ${bodyVar})`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n      builder.line()\n    } else {\n      builder.line(`req, _ := http.NewRequest(\"${http.method.toUpperCase()}\", url, ${bodyVar})`)\n      builder.line()\n    }\n\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.Header.Add(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`req.Header.Set(\"${key}\", \"${value}\")`)\n        }\n      }\n\n      builder.line()\n    }\n\n    if (http.cookies) {\n      for (const [key, value] of Object.entries(http.cookies)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.AddCookie(&http.Cookie{Name: \"${key}\", Value: \"${val}\"})`)\n          }\n        } else {\n          builder.line(`req.AddCookie(&http.Cookie{Name: \"${key}\", Value: \"${value}\"})`)\n        }\n      }\n\n      builder.line()\n    }\n\n    if (config.handleErrors) {\n      builder.line(`resp, err := http.DefaultClient.Do(req)`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line(`resp, _ := http.DefaultClient.Do(req)`)\n    }\n\n    builder.line(`defer resp.Body.Close()`)\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line(`body, err := io.ReadAll(resp.Body)`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line(`body, _ := io.ReadAll(resp.Body)`)\n    }\n\n    builder.line()\n    builder.line(`fmt.Println(string(body))`)\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'java',\n  client: 'httpurlconnection',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n\n    builder.line('import java.io.*;')\n    builder.line('import java.net.*;')\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('import java.net.URLEncoder;')\n    }\n    if (hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))) {\n      builder.line('import org.json.JSONObject;')\n    }\n    builder.line()\n\n    builder.line('public class HttpExample {')\n    builder.indent()\n    builder.line('public static void main(String[] args) {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(`String baseUrl = \"${http.url}\";`)\n      builder.line('StringBuilder urlBuilder = new StringBuilder(baseUrl);')\n      builder.line('urlBuilder.append(baseUrl.contains(\"?\") ? \"&\" : \"?\");')\n      builder.line()\n      builder.line('String[] paramPairs = {')\n      builder.indent()\n      const paramPairs: string[] = []\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            paramPairs.push(`\"${key}=\" + URLEncoder.encode(\"${val}\", \"UTF-8\")`)\n          }\n        } else {\n          paramPairs.push(`\"${key}=\" + URLEncoder.encode(\"${value}\", \"UTF-8\")`)\n        }\n      }\n      for (let i = 0; i < paramPairs.length; i++) {\n        if (i === paramPairs.length - 1) {\n          builder.line(paramPairs[i])\n        } else {\n          builder.line(paramPairs[i] + ',')\n        }\n      }\n      builder.outdent()\n      builder.line('};')\n      builder.line()\n      builder.line('for (int i = 0; i < paramPairs.length; i++) {')\n      builder.indent()\n      builder.line('if (i > 0) urlBuilder.append(\"&\");')\n      builder.line('urlBuilder.append(paramPairs[i]);')\n      builder.outdent()\n      builder.line('}')\n      builder.line()\n      builder.line('URL url = new URL(urlBuilder.toString());')\n    } else {\n      builder.line(`URL url = new URL(\"${http.url}\");`)\n    }\n    builder.line('HttpURLConnection conn = (HttpURLConnection) url.openConnection();')\n    builder.line(`conn.setRequestMethod(\"${http.method.toUpperCase()}\");`)\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`conn.setRequestProperty(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`conn.setRequestProperty(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`conn.setRequestProperty(\"Cookie\", \"${cookieString}\");`)\n    }\n\n    if (hasBody) {\n      builder.line()\n      builder.line('conn.setDoOutput(true);')\n      builder.line()\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('JSONObject jsonBody = new JSONObject();')\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`jsonBody.put(\"${key}\", \"${value}\");`)\n          } else if (typeof value === 'number' || typeof value === 'boolean') {\n            builder.line(`jsonBody.put(\"${key}\", ${value});`)\n          } else if (value === null) {\n            builder.line(`jsonBody.put(\"${key}\", JSONObject.NULL);`)\n          } else {\n            builder.line(`jsonBody.put(\"${key}\", ${JSON.stringify(value)});`)\n          }\n        }\n        builder.line()\n        builder.line('try (OutputStream os = conn.getOutputStream()) {')\n        builder.indent()\n        builder.line('byte[] input = jsonBody.toString().getBytes(\"utf-8\");')\n        builder.line('os.write(input, 0, input.length);')\n        builder.outdent()\n        builder.line('}')\n      } else if (IsStringBody(http.body)) {\n        builder.line('try (OutputStream os = conn.getOutputStream()) {')\n        builder.indent()\n        builder.line(`byte[] input = \"${http.body.replace(/\"/g, '\\\\\"')}\".getBytes(\"utf-8\");`)\n        builder.line('os.write(input, 0, input.length);')\n        builder.outdent()\n        builder.line('}')\n      }\n    }\n\n    builder.line()\n    builder.line('int responseCode = conn.getResponseCode();')\n    builder.line('BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));')\n    builder.line('String inputLine;')\n    builder.line('StringBuilder response = new StringBuilder();')\n    builder.line()\n    builder.line('while ((inputLine = in.readLine()) != null) {')\n    builder.indent()\n    builder.line('response.append(inputLine);')\n    builder.outdent()\n    builder.line('}')\n    builder.line('in.close();')\n    builder.line()\n    builder.line('System.out.println(response.toString());')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (Exception e) {')\n      builder.indent()\n      builder.line('e.printStackTrace();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'java',\n  client: 'okhttp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n    const needsJson = hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n\n    builder.line('import okhttp3.*;')\n    if (needsJson) {\n      builder.line('import org.json.JSONObject;')\n    }\n    if (contentType && ContentTypeIncludes(contentType, 'form')) {\n      builder.line('import java.util.*;')\n    }\n    builder.line()\n\n    builder.line('public class HttpExample {')\n    builder.indent()\n    builder.line('public static void main(String[] args) {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('OkHttpClient client = new OkHttpClient();')\n    builder.line()\n\n    // Build request body if needed\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('FormBody.Builder formBuilder = new FormBody.Builder();')\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`formBuilder.add(\"${key}\", \"${value}\");`)\n        }\n        builder.line('RequestBody body = formBuilder.build();')\n      } else if (needsJson) {\n        builder.line('JSONObject jsonBody = new JSONObject();')\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`jsonBody.put(\"${key}\", \"${value}\");`)\n          } else if (typeof value === 'number' || typeof value === 'boolean') {\n            builder.line(`jsonBody.put(\"${key}\", ${value});`)\n          } else if (value === null) {\n            builder.line(`jsonBody.put(\"${key}\", JSONObject.NULL);`)\n          } else {\n            builder.line(`jsonBody.put(\"${key}\", ${JSON.stringify(value)});`)\n          }\n        }\n        builder.line('RequestBody body = RequestBody.create(')\n        builder.indent()\n        builder.line('jsonBody.toString(),')\n        builder.line('MediaType.parse(\"application/json; charset=utf-8\")')\n        builder.outdent()\n        builder.line(');')\n      } else if (IsStringBody(http.body)) {\n        builder.line('RequestBody body = RequestBody.create(')\n        builder.indent()\n        builder.line(`\"${http.body.replace(/\"/g, '\\\\\"')}\",`)\n        builder.line(`MediaType.parse(\"${contentType || 'text/plain'}; charset=utf-8\")`)\n        builder.outdent()\n        builder.line(');')\n      }\n      builder.line()\n    }\n\n    // Build request\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('HttpUrl.Builder urlBuilder = HttpUrl.parse(\"' + http.url + '\").newBuilder();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`urlBuilder.addQueryParameter(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`urlBuilder.addQueryParameter(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('HttpUrl url = urlBuilder.build();')\n      builder.line()\n    }\n\n    builder.line('Request.Builder requestBuilder = new Request.Builder()')\n    builder.indent()\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('.url(url)')\n    } else {\n      builder.line(`.url(\"${http.url}\")`)\n    }\n\n    if (hasBody) {\n      builder.line('.method(\"' + http.method.toUpperCase() + '\", body)')\n    } else {\n      builder.line('.method(\"' + http.method.toUpperCase() + '\", null)')\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.addHeader(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.addHeader(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`.addHeader(\"Cookie\", \"${cookieString}\")`)\n    }\n\n    builder.line('.build();')\n    builder.outdent()\n    builder.line()\n    builder.line('Request request = requestBuilder;')\n    builder.line('Response response = client.newCall(request).execute();')\n    builder.line()\n    builder.line('System.out.println(response.body().string());')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (Exception e) {')\n      builder.indent()\n      builder.line('e.printStackTrace();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetEffectiveContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'javascript',\n  client: 'fetch',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('const url = new URL(\"' + http.url + '\");')\n      builder.line('const params = new URLSearchParams();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`params.append(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`params.set(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('url.search = params.toString();')\n      builder.line()\n      builder.line('fetch(url.toString(), {')\n    } else {\n      builder.line('fetch(\"' + http.url + '\", {')\n    }\n    builder.indent()\n    builder.line(`method: \"${http.method.toUpperCase()}\",`)\n\n    // Headers\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Note: Cookies are not supported in the fetch API\n    // Cookies\n    // if (http.cookies) {\n    // }\n\n    if (http.body) {\n      builder.line('body: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    // Determine response parsing method based on content-type or accept headers\n    // For responses, only use explicit headers (don't infer from request body)\n    const { contentType: responseType, wasInferred } = GetEffectiveContentType(http.headers)\n    let parseMethod = 'text()' // Default to text() for safety when no Content-Type\n\n    // Only change from default if we have an explicit header (not inferred octet-stream)\n    if (!wasInferred || responseType !== 'application/octet-stream') {\n      if (ContentTypeIncludes(responseType, 'json')) {\n        parseMethod = 'json()'\n      } else if (ContentTypeIncludes(responseType, 'xml')) {\n        parseMethod = 'text()' // XML is typically parsed as text, then processed with DOMParser\n      } else if (ContentTypeIncludes(responseType, 'text')) {\n        parseMethod = 'text()'\n      } else if (ContentTypeIncludes(responseType, 'blob')) {\n        parseMethod = 'blob()'\n      }\n    }\n\n    // Add comment if content-type was inferred for non-default responses\n    if (wasInferred && parseMethod === 'json()') {\n      builder.line(`// Response Content-Type inferred as: ${responseType}`)\n    }\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('if (!response.ok) {')\n      builder.indent()\n      builder.line('throw new Error(\"Network response was not ok\");')\n      builder.outdent()\n      builder.line('}')\n      builder.line(`return response.${parseMethod};`)\n      builder.outdent()\n      builder.line('})')\n      builder.line('.then(data => console.log(data))')\n      builder.line('.catch(error => console.error(\"There was a problem with the fetch operation:\", error));')\n    } else {\n      builder.line(`.then(response => response.${parseMethod})`)\n      builder.line('.then(data => console.log(data));')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  language: 'javascript',\n  client: 'axios',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('axios({')\n    builder.indent()\n    builder.line(`method: \"${http.method.toLowerCase()}\",`)\n    builder.line(`url: \"${http.url}\",`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('params: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Headers\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Cookies\n    if (http.cookies) {\n      builder.line('cookies: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`\"${key}\": \"${value}\",`)\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('data: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('console.log(response.data);')\n      builder.outdent()\n      builder.line('})')\n      builder.line('.catch(error => {')\n      builder.indent()\n      builder.line('console.error(\"There was an error:\", error);')\n      builder.outdent()\n      builder.line('});')\n    } else {\n      builder.line('.then(response => console.log(response.data));')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  language: 'javascript',\n  client: 'jquery',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('$.ajax({')\n    builder.indent()\n    builder.line(`url: \"${http.url}\",`)\n    builder.line(`type: \"${http.method.toUpperCase()}\",`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('data: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('data: ')\n      builder.json(http.body)\n      builder.append(',')\n      builder.line('contentType: \"application/json\",')\n    }\n\n    // Note: Cookies are not supported in jQuery\n\n    builder.line('success: function(data) {')\n    builder.indent()\n    builder.line('console.log(data);')\n    builder.outdent()\n    builder.line('},')\n\n    if (config.handleErrors) {\n      builder.line('error: function(jqXHR, textStatus, errorThrown) {')\n      builder.indent()\n      builder.line('console.error(\"Request failed:\", textStatus, errorThrown);')\n      builder.outdent()\n      builder.line('},')\n    }\n\n    builder.outdent()\n    builder.line('});')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'kotlin',\n  client: 'ktor',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n\n    builder.line('import io.ktor.client.*')\n    builder.line('import io.ktor.client.engine.cio.*')\n    builder.line('import io.ktor.client.request.*')\n    builder.line('import io.ktor.client.statement.*')\n    if (hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))) {\n      builder.line('import io.ktor.http.*')\n      builder.line('import kotlinx.serialization.json.*')\n    }\n    if (contentType && ContentTypeIncludes(contentType, 'form')) {\n      builder.line('import io.ktor.http.*')\n    }\n    builder.line()\n\n    builder.line('suspend fun main() {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('val client = HttpClient(CIO)')\n    builder.line()\n    builder.line(`val response: HttpResponse = client.${http.method.toLowerCase()} {`)\n    builder.indent()\n    builder.line(`url(\"${http.url}\")`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`parameter(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`parameter(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`header(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`header(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`header(\"Cookie\", \"${cookieString}\")`)\n    }\n\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('setBody(')\n        builder.indent()\n        builder.line('FormDataContent(Parameters.build {')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`append(\"${key}\", \"${value}\")`)\n        }\n        builder.outdent()\n        builder.line('})')\n        builder.outdent()\n        builder.line(')')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('contentType(ContentType.Application.Json)')\n        builder.line('setBody(')\n        builder.indent()\n        builder.line('buildJsonObject {')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`put(\"${key}\", \"${value}\")`)\n          } else if (typeof value === 'number') {\n            builder.line(`put(\"${key}\", ${value})`)\n          } else if (typeof value === 'boolean') {\n            builder.line(`put(\"${key}\", ${value})`)\n          } else if (value === null) {\n            builder.line(`put(\"${key}\", JsonNull)`)\n          } else {\n            builder.line(`put(\"${key}\", JsonPrimitive(${JSON.stringify(value)}))`)\n          }\n        }\n        builder.outdent()\n        builder.line('}')\n        builder.outdent()\n        builder.line(')')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`setBody(\"${http.body.replace(/\"/g, '\\\\\"')}\")`)\n      }\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n    builder.line('println(response.bodyAsText())')\n    builder.line('client.close()')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (e: Exception) {')\n      builder.indent()\n      builder.line('println(\"Error: ${e.message}\")')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { ParseUrl } from '../utils/utils'\n\nexport default {\n  language: 'node',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('const http = require(\"http\");')\n    builder.line()\n\n    const { hostname, path, port, protocol } = ParseUrl(http.url)\n\n    // Build path with parameters\n    let finalPath = path\n    if (http.params && Object.keys(http.params).length > 0) {\n      const params = new URLSearchParams()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            params.append(key, val)\n          }\n        } else {\n          params.append(key, value)\n        }\n      }\n      const paramString = params.toString()\n      if (paramString) {\n        const separator = path.includes('?') ? '&' : '?'\n        finalPath = `${path}${separator}${paramString}`\n      }\n    }\n\n    builder.line('const options = {')\n    builder.indent()\n    builder.line(`method: \"${http.method.toUpperCase()}\",`)\n    builder.line(`hostname: \"${hostname}\",`)\n    builder.line(`path: \"${finalPath}\",`)\n\n    if (http.headers || http.cookies) {\n      builder.line('headers: {')\n      builder.indent()\n\n      if (http.headers) {\n        for (const [key, value] of Object.entries(http.headers)) {\n          if (Array.isArray(value)) {\n            builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n          } else {\n            builder.line(`\"${key}\": \"${value}\",`)\n          }\n        }\n      }\n\n      if (http.cookies) {\n        const cookieString = Object.entries(http.cookies)\n          .map(([key, value]) => `${key}=${value}`)\n          .join('; ')\n        builder.line(`\"Cookie\": \"${cookieString}\",`)\n      }\n\n      builder.outdent()\n      builder.line('},')\n    }\n    builder.outdent()\n    builder.line('};')\n    builder.line()\n\n    builder.line('const req = http.request(options, (res) => {')\n    builder.indent()\n    builder.line('let data = \"\";')\n    builder.line()\n    builder.line('res.on(\"data\", (chunk) => {')\n    builder.indent()\n    builder.line('data += chunk;')\n    builder.outdent()\n    builder.line('});')\n    builder.line()\n    builder.line('res.on(\"end\", () => {')\n    builder.indent()\n    builder.line('console.log(data);')\n    builder.outdent()\n    builder.line('});')\n    builder.outdent()\n    builder.line('});')\n\n    if (config.handleErrors) {\n      builder.line()\n      builder.line('req.on(\"error\", (error) => {')\n      builder.indent()\n      builder.line('console.error(error);')\n      builder.outdent()\n      builder.line('});')\n    }\n\n    builder.line()\n\n    if (http.body) {\n      builder.line('req.write(')\n      builder.json(http.body)\n      builder.append(');')\n    }\n    builder.line('req.end();')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'node',\n  client: 'fetch',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('const fetch = require(\"node-fetch\");')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('const url = new URL(\"' + http.url + '\");')\n      builder.line('const params = new URLSearchParams();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`params.append(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`params.set(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('url.search = params.toString();')\n      builder.line()\n      builder.line('fetch(url.toString(), {')\n    } else {\n      builder.line('fetch(\"' + http.url + '\", {')\n    }\n    builder.indent()\n    builder.line('method: \"' + http.method.toUpperCase() + '\",')\n\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('body: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    // Determine response parsing method based on content-type or accept headers\n    const responseType = GetContentType(http.headers)\n    let parseMethod = 'text()'\n\n    if (ContentTypeIncludes(responseType, 'json')) {\n      parseMethod = 'json()'\n    } else if (ContentTypeIncludes(responseType, 'xml')) {\n      parseMethod = 'text()'\n    } else if (ContentTypeIncludes(responseType, 'text')) {\n      parseMethod = 'text()'\n    } else if (ContentTypeIncludes(responseType, 'blob')) {\n      parseMethod = 'blob()'\n    }\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('if (!response.ok) {')\n      builder.indent()\n      builder.line('throw new Error(\"response not ok\");')\n      builder.outdent()\n      builder.line('}')\n      builder.line(`return response.${parseMethod};`)\n      builder.outdent()\n      builder.line('})')\n      builder.line('.then(data => console.log(data))')\n      builder.line('.catch(error => console.error(\"error:\", error));')\n    } else {\n      builder.line(`.then(response => response.${parseMethod})`)\n      builder.line('.then(data => console.log(data))')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'php',\n  client: 'curl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    // Start our PHP file\n    builder.line('<?php')\n    builder.line()\n\n    // Initialize cURL\n    builder.line('$ch = curl_init();')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('$url = \"' + http.url + '\";')\n      builder.line('$params = [];')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`$params[] = \"${key}=\" . urlencode(\"${val}\");`)\n          }\n        } else {\n          builder.line(`$params[] = \"${key}=\" . urlencode(\"${value}\");`)\n        }\n      }\n      builder.line('$url .= (strpos($url, \"?\") !== false ? \"&\" : \"?\") . implode(\"&\", $params);')\n      builder.line()\n      builder.line('curl_setopt($ch, CURLOPT_URL, $url);')\n    } else {\n      builder.line(`curl_setopt($ch, CURLOPT_URL, \"${http.url}\");`)\n    }\n    builder.line('curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);')\n    builder.line(`curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"${http.method.toUpperCase()}\");`)\n\n    // Headers\n    if (http.headers) {\n      builder.line()\n      builder.line('$headers = [];')\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`$headers[] = \"${key}: ${val}\";`))\n        } else {\n          builder.line(`$headers[] = \"${key}: ${value}\";`)\n        }\n      }\n      builder.line('curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);')\n    }\n\n    // Cookies\n    if (http.cookies) {\n      builder.line()\n      builder.line('$cookies = [];')\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`$cookies[] = \"${key}=${value}\";`)\n      }\n      builder.line('curl_setopt($ch, CURLOPT_COOKIE, implode(\"; \", $cookies));')\n    }\n\n    // Body\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('$postData = ')\n        builder.json(http.body)\n        builder.append(';')\n        builder.line('curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('curl_setopt($ch, CURLOPT_POSTFIELDS,')\n        builder.line('<<<JSON')\n        builder.line()\n        builder.json(http.body)\n        builder.line('JSON')\n        builder.line(');')\n      } else if (IsStringBody(http.body)) {\n        const escapedBody = http.body.replace(/'/g, \"\\\\'\")\n        builder.line(`curl_setopt($ch, CURLOPT_POSTFIELDS, '${escapedBody}');`)\n      }\n    }\n\n    // Execute and handle response\n    builder.line()\n    builder.line('$response = curl_exec($ch);')\n\n    if (config.handleErrors) {\n      builder.line('if (curl_errno($ch)) {')\n      builder.indent()\n      builder.line('echo \"Error: \" . curl_error($ch);')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.line('curl_close($ch);')\n    builder.line()\n    builder.line('echo $response;')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'php',\n  client: 'guzzle',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n',\n      json: {\n        objOpen: '[',\n        objClose: ']',\n        arrOpen: '[',\n        arrClose: ']',\n        separator: ' => ',\n        endComma: true\n      }\n    })\n\n    builder.line('<?php')\n    builder.line()\n    builder.line(\"require 'vendor/autoload.php';\")\n    builder.line()\n    builder.line('use GuzzleHttp\\\\Client;')\n    if (config.handleErrors) {\n      builder.line('use GuzzleHttp\\\\Exception\\\\RequestException;')\n    }\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('$client = new Client();')\n    builder.line('$response = $client->request(')\n    builder.indent()\n    builder.line('\"' + http.method.toUpperCase() + '\",')\n    builder.line('\"' + http.url + '\",')\n\n    // Headers, query params, and body\n    if (http.headers || http.cookies || http.body || http.params) {\n      builder.line('[')\n\n      // Query parameters\n      if (http.params && Object.keys(http.params).length > 0) {\n        builder.indent()\n        builder.line('\"query\" => [')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.params)) {\n          if (Array.isArray(value)) {\n            for (const val of value) {\n              builder.line(`\"${key}\" => \"${val}\",`)\n            }\n          } else {\n            builder.line(`\"${key}\" => \"${value}\",`)\n          }\n        }\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.headers) {\n        builder.indent()\n        builder.line('\"headers\" => [')\n        builder.indent()\n\n        for (const [key, value] of Object.entries(http.headers)) {\n          if (Array.isArray(value)) {\n            value.forEach((val) => builder.line(`\"${key}\" => \"${val}\",`))\n          } else {\n            builder.line(`\"${key}\" => \"${value}\",`)\n          }\n        }\n\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.cookies) {\n        builder.indent()\n        builder.line('\"cookies\" => [')\n        builder.indent()\n\n        for (const [key, value] of Object.entries(http.cookies)) {\n          builder.line(`\"${key}\" => \"${value}\",`)\n        }\n\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.body) {\n        builder.indent()\n        const contentType = GetContentType(http.headers)\n\n        if (ContentTypeIncludes(contentType, 'form')) {\n          builder.line('\"form_params\" => ')\n          builder.json(http.body)\n          builder.append(',')\n        } else {\n          // Default to JSON (if content-type is json or not specified)\n          builder.line('\"json\" => ')\n          builder.json(http.body)\n          builder.append(',')\n        }\n        builder.outdent()\n      }\n\n      // End headers and body\n      builder.line('],')\n    }\n\n    // End request\n    builder.outdent()\n    builder.line(');')\n    builder.line()\n\n    builder.line('echo $response->getBody();')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (RequestException $e) {')\n      builder.indent()\n      builder.line('echo \"Error: \" . $e->getMessage();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { ParseUrl, GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'python',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n    const method = http.method.toUpperCase()\n    const hasPayload = method !== 'GET' && http.body\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n    const hasCookies = http.cookies && Object.keys(http.cookies).length > 0\n    let params: string[] = []\n\n    builder.line('import http.client')\n    builder.line('import json')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try:')\n      builder.indent()\n    }\n\n    const { hostname, path, port, protocol } = ParseUrl(http.url)\n\n    // Build path with parameters\n    let finalPath = `\"${path}\"`\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('from urllib.parse import urlencode')\n      builder.line('params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n      builder.line('query_string = urlencode(params, doseq=True)')\n      builder.line(`final_path = f\"${path}?{query_string}\"`)\n      finalPath = 'final_path'\n    }\n\n    builder.line(`conn = http.client.HTTPSConnection(\"${hostname}\", ${port})`)\n\n    // Headers\n    if (hasHeaders) {\n      builder.line()\n      params.push('headers')\n      builder.line('headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers!)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    // Cookies\n    if (hasCookies) {\n      builder.line()\n      params.push('cookies')\n      builder.line('cookies = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies!)) {\n        builder.line(`\"${key}\": \"${value}\",`)\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    // Payload\n    if (hasPayload) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('from urllib.parse import urlencode')\n        builder.line('payload_dict = ')\n        builder.json(http.body)\n        builder.line('payload = urlencode(payload_dict)')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('payload_dict = ')\n        builder.json(http.body)\n        builder.line('payload = json.dumps(payload_dict)')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`payload = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      }\n    }\n\n    // Build request based upon whether headers, cookies and payload are present\n    builder.line()\n    if (hasPayload) {\n      const otherParams = params.filter((p) => p !== 'payload')\n      builder.line(\n        `conn.request(\"${method}\", ${finalPath}, payload` +\n          (otherParams.length > 0 ? `, ${otherParams.join(', ')}` : '') +\n          ')'\n      )\n    } else {\n      builder.line(`conn.request(\"${method}\", ${finalPath}` + (params.length > 0 ? `, ${params.join(', ')}` : '') + ')')\n    }\n    builder.line('res = conn.getresponse()')\n    builder.line('data = res.read()')\n    builder.line()\n    builder.line('print(data.decode(\"utf-8\"))')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('except Exception as e:')\n      builder.indent()\n      builder.line('print(f\"Error: {e}\")')\n      builder.outdent()\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'python',\n  client: 'requests',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const method = http.method.toUpperCase()\n    const hasPayload = method !== 'GET' && http.body\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n    const hasCookies = http.cookies && Object.keys(http.cookies).length > 0\n    let params: string[] = []\n\n    builder.line('import requests')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try:')\n      builder.indent()\n    }\n\n    builder.line('url = \"' + http.url + '\"')\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      params.push('params=url_params')\n      builder.line('url_params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}]`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\"`)\n        }\n\n        if (Object.keys(http.params).indexOf(key) !== Object.keys(http.params).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasHeaders) {\n      builder.line()\n      params.push('headers=headers')\n      builder.line('headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers!)) {\n        builder.line(`\"${key}\": \"${value}\"`)\n\n        if (Object.keys(http.headers!).indexOf(key) !== Object.keys(http.headers!).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasCookies) {\n      builder.line()\n      params.push('cookies=cookies')\n      builder.line('cookies = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies!)) {\n        builder.line(`\"${key}\": \"${value}\"`)\n\n        if (Object.keys(http.cookies!).indexOf(key) !== Object.keys(http.cookies!).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasPayload) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        params.push('data=form_data')\n        builder.line('form_data = ')\n        builder.json(http.body)\n      } else {\n        // Default to JSON (if content-type is json or not specified with object body)\n        params.push('json=json_data')\n        builder.line('json_data = ')\n        builder.json(http.body)\n      }\n    }\n\n    builder.line()\n    builder.line(\n      'response = requests.' +\n        http.method.toLowerCase() +\n        '(url' +\n        (params.length > 0 ? `, ${params.join(', ')}` : '') +\n        ')'\n    )\n    builder.line('print(response.text)')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('except requests.exceptions.RequestException as e:')\n      builder.indent()\n      builder.line('print(f\"Error: {e}\")')\n      builder.outdent()\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'ruby',\n  client: 'nethttp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('require \"net/http\"')\n    builder.line('require \"uri\"')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('begin')\n      builder.indent()\n    }\n\n    // Build URI with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('uri = URI.parse(\"' + http.url + '\")')\n      builder.line('params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\" => [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\" => \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n      builder.line('uri.query = URI.encode_www_form(params)')\n    } else {\n      builder.line('uri = URI.parse(\"' + http.url + '\")')\n    }\n\n    if (http.method.toUpperCase() === 'GET') {\n      builder.line('request = Net::HTTP::Get.new(uri)')\n    } else if (http.method.toUpperCase() === 'POST') {\n      builder.line('request = Net::HTTP::Post.new(uri)')\n    } else if (http.method.toUpperCase() === 'PUT') {\n      builder.line('request = Net::HTTP::Put.new(uri)')\n    } else if (http.method.toUpperCase() === 'DELETE') {\n      builder.line('request = Net::HTTP::Delete.new(uri)')\n    } else {\n      builder.line('request = Net::HTTP::GenericRequest.new(\"' + http.method.toUpperCase() + '\", uri.path, nil, nil)')\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request[\"${key}\"] = \"${val}\"`))\n        } else {\n          builder.line(`request[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request[\"Cookie\"] = \"${cookieString}\"`)\n    }\n\n    if (http.body) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('request.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`request.body = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      } else {\n        // For form data or other objects, convert to JSON string\n        builder.line('request.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      }\n    }\n\n    builder.line()\n    builder.line('response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == \"https\") do |http|')\n    builder.indent()\n    builder.line('http.request(request)')\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('puts response.body')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('rescue StandardError => e')\n      builder.indent()\n      builder.line('puts \"Error: #{e.message}\"')\n      builder.outdent()\n      builder.line('end')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'ruby',\n  client: 'faraday',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('require \"faraday\"')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('begin')\n      builder.indent()\n    }\n\n    builder.line('conn = Faraday.new(url: \"' + http.url + '\") do |f|')\n    builder.indent()\n    builder.line('f.adapter Faraday.default_adapter')\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('response = conn.' + http.method.toLowerCase() + ' do |req|')\n    builder.indent()\n    builder.line('req.url \"' + http.url + '\"')\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.params[\"${key}\"] = \"${val}\"`)\n          }\n        } else {\n          builder.line(`req.params[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.headers) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`req.headers[\"${key}\"] = \"${val}\"`))\n        } else {\n          builder.line(`req.headers[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.cookies) {\n      builder.line()\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`req.headers[\"Cookie\"] = \"${cookieString}\"`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('req.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`req.body = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      } else {\n        // For form data or other objects, convert to JSON string\n        builder.line('req.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      }\n    }\n\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('puts response.body')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('rescue Faraday::Error => e')\n      builder.indent()\n      builder.line('puts \"Error: #{e.message}\"')\n      builder.outdent()\n      builder.line('end')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'rust',\n  client: 'reqwest',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('use reqwest::blocking::Client;')\n    builder.line('use std::error::Error;')\n    builder.line()\n    builder.line('fn main() -> Result<(), Box<dyn Error>> {')\n    builder.indent()\n    builder.line('let client = Client::new();')\n    builder.line()\n    builder.line('let res = client.request(reqwest::Method::' + http.method.toUpperCase() + ', \"' + http.url + '\")')\n    builder.indent()\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('.query(&[')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`(\"${key}\", \"${val}\"),`)\n          }\n        } else {\n          builder.line(`(\"${key}\", \"${value}\"),`)\n        }\n      }\n      builder.outdent()\n      builder.line('])')\n    }\n\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.header(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.header(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies) {\n      for (const [key, value] of Object.entries(http.cookies)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.cookie(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.cookie(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.body) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('.form(&')\n        builder.json(http.body)\n        builder.append(')')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('.json(&')\n        builder.json(http.body)\n        builder.append(')')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`.body(\"${http.body.replace(/\"/g, '\\\\\"')}\")`)\n      }\n    }\n\n    builder.line('.send()?;')\n    builder.outdent()\n\n    builder.line()\n    if (config.handleErrors) {\n      builder.line('if res.status().is_success() {')\n      builder.indent()\n      builder.line('println!(\"{}\", res.text()?);')\n      builder.outdent()\n      builder.line('} else {')\n      builder.indent()\n      builder.line('eprintln!(\"Request failed with status: {}\", res.status());')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line('println!(\"{}\", res.text()?);')\n    }\n\n    builder.line('Ok(())')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'shell',\n  client: 'curl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || ' \\\\\\n'\n    })\n\n    // Start curl command with method and URL\n    builder.line(`curl -X ${http.method} \"${http.url}\"`)\n\n    // Everything is indented\n    builder.indent()\n\n    // Add URL parameters using -G flag\n    if (http.params) {\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`-G -d \"${key}=${val.replace(/\"/g, '\\\\\"')}\"`)\n          }\n        } else {\n          builder.line(`-G -d \"${key}=${value.replace(/\"/g, '\\\\\"')}\"`)\n        }\n      }\n    }\n\n    // Add headers\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`-H \"${key}: ${val.replace(/\"/g, '\\\\\"')}\"`)\n          }\n        } else {\n          builder.line(`-H \"${key}: ${value.replace(/\"/g, '\\\\\"')}\"`)\n        }\n      }\n    }\n\n    // Add cookies\n    if (http.cookies) {\n      const cookieString = Object.entries(http.cookies)\n        .flatMap(([key, value]) => (Array.isArray(value) ? value.map((val) => `${key}=${val}`) : `${key}=${value}`))\n        .join('; ')\n      builder.line(`-b \"${cookieString}\"`)\n    }\n\n    // Add body\n    const hasContent = HasBody(http.body)\n\n    if (hasContent) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        // Pretty print JSON\n        builder.line(\"-d $'\")\n        // builder.indent()\n        builder.json(http.body)\n        builder.append(\"'\")\n      } else if (ContentTypeIncludes(contentType, 'form')) {\n        const formData = new URLSearchParams(http.body).toString().replace(/'/g, \"'\\\\''\")\n        builder.line(`-d '${formData}'`)\n      } else if (typeof http.body === 'string') {\n        const escapedBody = http.body.replace(/'/g, \"'\\\\''\")\n        builder.line(`-d '${escapedBody}'`)\n      }\n    }\n\n    // Output code\n    let output = builder.output()\n\n    // Remove the trailing backslash from the last line\n    output = output.replace(/\\\\\\s*$/, '').trim()\n\n    return output\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  default: true,\n  language: 'swift',\n  client: 'nsurlsession',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('import Foundation')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('var urlComponents = URLComponents(string: \"' + http.url + '\")!')\n      builder.line('var queryItems: [URLQueryItem] = []')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`queryItems.append(URLQueryItem(name: \"${key}\", value: \"${val}\"))`)\n          }\n        } else {\n          builder.line(`queryItems.append(URLQueryItem(name: \"${key}\", value: \"${value}\"))`)\n        }\n      }\n      builder.line('urlComponents.queryItems = queryItems')\n      builder.line('let url = urlComponents.url!')\n    } else {\n      builder.line('let url = URL(string: \"' + http.url + '\")!')\n    }\n    builder.line('var request = URLRequest(url: url)')\n    builder.line('request.httpMethod = \"' + http.method.toUpperCase() + '\"')\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.addValue(\"${val}\", forHTTPHeaderField: \"${key}\")`))\n        } else {\n          builder.line(`request.addValue(\"${value}\", forHTTPHeaderField: \"${key}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`request.addValue(\"${key}=${value}\", forHTTPHeaderField: \"Cookie\")`)\n      }\n    }\n\n    if (http.body) {\n      builder.line()\n      if (typeof http.body === 'string') {\n        builder.line(`let bodyString = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n        builder.line('request.httpBody = bodyString.data(using: .utf8)')\n      } else {\n        builder.line('let bodyDict: [String: Any] = ')\n        builder.json(http.body)\n        builder.line('request.httpBody = try? JSONSerialization.data(withJSONObject: bodyDict)')\n      }\n    }\n\n    builder.line()\n    builder.line('let task = URLSession.shared.dataTask(with: request) { data, response, error in')\n    builder.indent()\n    builder.line('if let error = error {')\n    builder.indent()\n    builder.line('print(\"Error: \\\\(error)\")')\n    builder.line('return')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n\n    builder.line('if let httpResponse = response as? HTTPURLResponse {')\n    builder.indent()\n    builder.line('if httpResponse.statusCode == 200, let data = data {')\n    builder.indent()\n    builder.line('let responseString = String(data: data, encoding: .utf8)')\n    builder.line('print(responseString ?? \"No response data\")')\n    builder.outdent()\n    builder.line('} else {')\n    builder.indent()\n    builder.line('print(\"Request failed with status code: \\\\(httpResponse.statusCode)\")')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n\n    builder.line('task.resume()')\n\n    return builder.output()\n  }\n} as Client\n","import { Clients, Languages, Search, SetDefault, Register, ClearRegistry } from './utils/registry'\nimport { Generate } from './utils/generate'\nimport { Builder } from './utils/builder'\nimport { IsJsonRequest } from './utils/utils'\n\n// Types\nimport type { Client } from './utils/registry'\nimport type { Method, Settings, Config, Http } from './utils/generate'\n\n// Clients\nimport CLibCurl from './clients/c.libcurl'\nimport CSharpHttp from './clients/csharp.http'\nimport CSharpRest from './clients/csharp.restsharp'\nimport DartHttp from './clients/dart.http'\nimport Go from './clients/go'\nimport JavaHttpURLConnection from './clients/java.httpurlconnection'\nimport JavaOkHttp from './clients/java.okhttp'\nimport JSFetch from './clients/js.fetch'\nimport JSAxios from './clients/js.axios'\nimport JSJquery from './clients/js.jquery'\nimport KotlinKtor from './clients/kotlin.ktor'\nimport Node from './clients/node.http'\nimport NodeFetch from './clients/node.fetch'\nimport PHPCurl from './clients/php.curl'\nimport PHPGuzzle from './clients/php.guzzle'\nimport PythonHttp from './clients/python.http'\nimport PythonRequests from './clients/python.requests'\nimport Ruby from './clients/ruby.nethttp'\nimport RubyFaraday from './clients/ruby.faraday'\nimport RustReqwest from './clients/rust.reqwest'\nimport ShellCurl from './clients/shell.curl'\nimport SwiftNsurlsession from './clients/swift.nsurlsession'\n\n// Register all languages\nRegister(CLibCurl)\nRegister(CSharpHttp)\nRegister(CSharpRest)\nRegister(DartHttp)\nRegister(Go)\nRegister(JavaHttpURLConnection)\nRegister(JavaOkHttp)\nRegister(JSFetch)\nRegister(JSAxios)\nRegister(JSJquery)\nRegister(KotlinKtor)\nRegister(Node)\nRegister(NodeFetch)\nRegister(PHPCurl)\nRegister(PHPGuzzle)\nRegister(PythonHttp)\nRegister(PythonRequests)\nRegister(Ruby)\nRegister(RubyFaraday)\nRegister(RustReqwest)\nRegister(ShellCurl)\nRegister(SwiftNsurlsession)\n\nexport {\n  // Registry\n  Client,\n  Clients,\n  Languages,\n  Search,\n  SetDefault,\n  Register,\n  ClearRegistry,\n\n  // Generate\n  Method,\n  Settings,\n  Config,\n  Http,\n  Generate,\n\n  // Builder\n  Builder,\n\n  // Utils\n  IsJsonRequest\n}\n","// UMD entry point - creates a default export with all named exports attached\n// This avoids the mixed exports issue for UMD/IIFE builds\nimport * as namedExports from './index'\n\n// Create a default export object with all named exports\nconst GimmeHTTP = Object.assign({}, namedExports)\n\nexport default GimmeHTTP\n"],"names":["clients","Clients","Languages","c","v","i","a","Search","language","client","clientsFilter","defaultClient","clientResult","SetDefault","Register","g","curClients","exists","index","ClearRegistry","Generate","req","err","validate","setConfig","code","config","Builder","options","line","json","isSub","item","keys","key","depth","ParseUrl","url","hostname","path","port","protocol","params","parsedUrl","urlParts","pathAndParams","pathPart","paramsPart","IsJsonRequest","method","headers","GetContentType","value","HasBody","body","IsStringBody","IsObjectBody","ContentTypeIncludes","contentType","type","lower","InferContentType","GetEffectiveContentType","explicit","CLibCurl","http","builder","val","paramString","separator","paramParts","cookies","CSharpHttp","CSharpRest","DartHttp","hasBody","needsJsonEncode","bodyVar","hasHeaders","Go","isJsonBody","isFormBody","needsBytes","JavaHttpURLConnection","paramPairs","cookieString","JavaOkHttp","needsJson","JSFetch","responseType","wasInferred","parseMethod","JSAxios","JSJquery","KotlinKtor","Node","finalPath","NodeFetch","PHPCurl","escapedBody","PHPGuzzle","PythonHttp","hasPayload","hasCookies","otherParams","p","PythonRequests","Ruby","RubyFaraday","RustReqwest","ShellCurl","formData","output","SwiftNsurlsession"],"mappings":"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"}