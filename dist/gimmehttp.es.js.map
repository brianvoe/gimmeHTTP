{"version":3,"file":"gimmehttp.es.js","sources":["../src/gimmehttp/utils/registry.ts","../src/gimmehttp/utils/generate.ts","../src/gimmehttp/utils/builder.ts","../src/gimmehttp/utils/utils.ts","../src/gimmehttp/clients/c.libcurl.ts","../src/gimmehttp/clients/csharp.http.ts","../src/gimmehttp/clients/csharp.restsharp.ts","../src/gimmehttp/clients/dart.http.ts","../src/gimmehttp/clients/go.ts","../src/gimmehttp/clients/java.httpurlconnection.ts","../src/gimmehttp/clients/java.okhttp.ts","../src/gimmehttp/clients/js.fetch.ts","../src/gimmehttp/clients/js.axios.ts","../src/gimmehttp/clients/js.jquery.ts","../src/gimmehttp/clients/kotlin.ktor.ts","../src/gimmehttp/clients/node.http.ts","../src/gimmehttp/clients/node.fetch.ts","../src/gimmehttp/clients/php.curl.ts","../src/gimmehttp/clients/php.guzzle.ts","../src/gimmehttp/clients/python.http.ts","../src/gimmehttp/clients/python.requests.ts","../src/gimmehttp/clients/ruby.nethttp.ts","../src/gimmehttp/clients/ruby.faraday.ts","../src/gimmehttp/clients/rust.reqwest.ts","../src/gimmehttp/clients/shell.curl.ts","../src/gimmehttp/clients/swift.nsurlsession.ts","../src/gimmehttp/index.ts"],"sourcesContent":["export interface Client {\n  default?: boolean\n  language: string\n  client: string\n  generate: (config: any, http: any) => string\n}\n\nconst clients: Client[] = []\n\nexport function Clients(): Client[] {\n  return clients\n}\n\nexport function Languages(): string[] {\n  // return all unque languages\n  return clients.map((c) => c.language).filter((v, i, a) => a.indexOf(v) === i)\n}\n\n// Search for client, whether or not they pass in a client\n// If no client, return the default client of that language\nexport function Search(language: string, client?: string): Client | null {\n  if (language === '' || language === undefined) {\n    return null\n  }\n\n  // Loop through and get all clients for the language\n  const clientsFilter = clients.filter((c) => c.language.toLowerCase() === language.toLowerCase())\n  if (clientsFilter.length === 0) {\n    return null\n  }\n\n  // Get default client\n  const defaultClient: Client = clientsFilter.find((c) => c.default) || clientsFilter[0]\n\n  // If no client, return default\n  if (!client) {\n    return defaultClient\n  }\n\n  // If client, return the client\n  const clientResult = clientsFilter.find((c) => c.client.toLowerCase() === client.toLowerCase())\n  if (!clientResult) {\n    return defaultClient\n  }\n\n  return clientResult\n}\n\nexport function SetDefault(language: string, client: string): void {\n  const clientResult = Search(language, client)\n  if (!clientResult) {\n    return\n  }\n\n  // Set the client as default\n  clientResult.default = true\n}\n\nexport function Register(client: Client | Client[]): Error | null {\n  if (!client) {\n    return new Error('Client is required')\n  }\n\n  // Register multiple clients\n  if (Array.isArray(client)) {\n    client.forEach((g) => Register(g))\n    return null\n  }\n\n  // Get current list of clients from client.language\n  const curClients = clients.filter((c) => c.language.toLowerCase() === client.language.toLowerCase())\n  const exists = curClients.find((c) => c.client.toLowerCase() === client.client.toLowerCase())\n\n  // Set default to false if undefined\n  if (client.default === undefined) {\n    client.default = curClients.length === 0 ? true : false\n  }\n\n  // If it exist, overwrite the client\n  if (exists) {\n    const index = clients.indexOf(client)\n    clients[index] = client\n    return null\n  }\n\n  // otherwise, add the client\n  clients.push(client)\n\n  return null\n}\n\nexport function ClearRegistry(): void {\n  clients.splice(0, clients.length)\n}\n","import { Search } from './registry'\n\nexport type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n\nexport interface Settings {\n  language?: string\n  client?: string\n\n  config?: Config\n  http: Http\n}\n\n// The outcome of the generated code\n// or an error message\nexport interface Outcome {\n  error?: string\n\n  language?: string // if set by default\n  client?: string // if set by default\n  code?: string\n}\n\nexport interface Config {\n  // The character(s) to use for indentation\n  indent?: string // default: '  '\n\n  // The character(s) to use for joining lines\n  join?: string // default: '\\n'\n\n  // Whether or not to handle errors in the generated code\n  // default: false to help keep the generated code simple by default\n  handleErrors?: boolean // default: false\n}\n\nexport interface Http {\n  method: Method\n  url: string\n  params?: { [key: string]: string | string[] }\n  headers?: { [key: string]: string | string[] }\n  cookies?: { [key: string]: string }\n  body?: any\n}\n\nexport function Generate(req: Settings): Outcome {\n  let err = validate(req)\n  if (err) {\n    return { error: err.message }\n  }\n\n  // Set default values for config\n  req.config = setConfig(req.config)\n\n  // Set default language if not set\n  if (!req.language) {\n    req.language = 'javascript' // I know, I know, but I have to pick a default\n  }\n\n  // Search for client, grab default if not found\n  const client = Search(req.language, req.client)\n  if (!client) {\n    return { error: 'Client not found' }\n  }\n\n  // Generate the code\n  const code = client.generate(req.config, req.http)\n\n  return {\n    language: client.language,\n    client: client.client,\n    code: code\n  } as Outcome\n}\n\nfunction validate(req: Settings): Error | undefined {\n  if (!req) {\n    return new Error('Request is required')\n  }\n\n  if (!req.http) {\n    return new Error('http is required')\n  }\n\n  if (!req.http.method) {\n    return new Error('http.method is required')\n  }\n\n  if (!req.http.url) {\n    return new Error('http.url is required')\n  }\n\n  return undefined\n}\n\nfunction setConfig(config: Config | undefined): Config {\n  config = config || {}\n\n  if (config.handleErrors === undefined) {\n    config.handleErrors = false\n  }\n\n  return config\n}\n","export interface BuilderOptions {\n  indent?: string\n  join?: string\n\n  // JSON options\n  json?: JSON\n}\n\nexport interface Line {\n  depth: number\n  line: string\n}\n\nexport interface JSON {\n  objOpen: string\n  objClose: string\n  arrOpen: string\n  arrClose: string\n  separator: string\n  endComma?: boolean // Add comma at end of object or array\n}\n\nexport class Builder {\n  private code: Line[] = []\n  private indentChar: string\n  private lineJoin: string\n  private currentDepth: number = 0\n\n  private jsonConfig: JSON = {\n    objOpen: '{',\n    objClose: '}',\n    arrOpen: '[',\n    arrClose: ']',\n    separator: ': ',\n    endComma: false\n  }\n\n  constructor(options: BuilderOptions = {}) {\n    this.indentChar = options.indent || '  '\n    this.lineJoin = options.join || '\\n'\n    this.jsonConfig = options.json || this.jsonConfig\n  }\n\n  public getIndent(): string {\n    return this.indentChar\n  }\n\n  public getJoin(): string {\n    return this.lineJoin\n  }\n\n  public line(line: string = ''): void {\n    // dont indent empty lines\n    this.code.push({ depth: line === '' ? 0 : this.currentDepth, line })\n  }\n\n  public append(line: string): void {\n    if (this.code.length > 0) {\n      this.code[this.code.length - 1].line += line\n    } else {\n      this.line(line)\n    }\n  }\n\n  public json(json: any, isSub: boolean = false): void {\n    if (!json) {\n      this.append('null')\n      return\n    }\n\n    switch (typeof json) {\n      case 'object':\n        if (Array.isArray(json)) {\n          this.append(this.jsonConfig.arrOpen)\n          this.indent()\n          json.forEach((item, index) => {\n            this.json(item, typeof json === 'object' || Array.isArray(json))\n\n            // Add comma if not last item\n            if (index < json.length - 1 || this.jsonConfig.endComma) {\n              this.append(',')\n            }\n          })\n          this.outdent()\n          this.line(this.jsonConfig.arrClose)\n        } else {\n          this.append(this.jsonConfig.objOpen)\n          this.indent()\n          const keys = Object.keys(json)\n          keys.forEach((key, index) => {\n            // Set key\n            this.line(`\"${key}\"` + this.jsonConfig.separator)\n            this.json(json[key], typeof key === 'object' || Array.isArray(key))\n\n            // Add comma if not last key\n            if (index < keys.length - 1 || this.jsonConfig.endComma) {\n              this.append(',')\n            }\n          })\n          this.outdent()\n          this.line(this.jsonConfig.objClose)\n        }\n        break\n      case 'string':\n        // Wrap string in double quotes\n        if (isSub) {\n          this.line(`\"${json}\"`)\n        } else {\n          this.append(`\"${json}\"`)\n        }\n        break\n      default:\n        if (isSub) {\n          this.line(String(json))\n        } else {\n          this.append(String(json))\n        }\n        break\n    }\n  }\n\n  public indent(): void {\n    this.currentDepth += 1\n  }\n\n  public outdent(): void {\n    if (this.currentDepth > 0) {\n      this.currentDepth -= 1\n    }\n  }\n\n  public output(): string {\n    return this.code\n      .map(({ depth, line }) => `${this.indentChar.repeat(depth)}${line}`)\n      .join(this.lineJoin)\n      .trimEnd()\n  }\n}\n","interface Url {\n  hostname: string\n  path: string\n  port: number\n  protocol: string\n  params: string\n}\n\nexport function ParseUrl(url: string): Url {\n  let hostname, path, port, protocol, params\n\n  try {\n    // Try to parse the URL, using the URL class\n    const parsedUrl = new URL(url)\n    hostname = parsedUrl.hostname\n    path = parsedUrl.pathname\n    params = parsedUrl.search\n    port = parsedUrl.port ? parseInt(parsedUrl.port) : parsedUrl.protocol === 'https:' ? 443 : 80\n    protocol = parsedUrl.protocol\n  } catch (error) {\n    // If the URL is invalid, parse it manually\n    const urlParts = url.split('/')\n    hostname = urlParts[0]\n    const pathAndParams = '/' + urlParts.slice(1).join('/')\n    const [pathPart, paramsPart] = pathAndParams.split('?')\n    path = pathPart\n    params = paramsPart ? '?' + paramsPart : ''\n    port = 80\n    protocol = 'http:'\n  }\n\n  // Ensure path starts with a slash\n  if (!path.startsWith('/')) {\n    path = '/' + path\n  }\n\n  return { hostname, path, port, protocol, params }\n}\n\nexport function IsJsonRequest(method: string, headers?: { [key: string]: string }): boolean {\n  return (\n    method.toUpperCase() === 'POST' &&\n    headers !== undefined &&\n    Object.keys(headers).some(\n      (key) => key.toLowerCase() === 'content-type' && headers[key].toLowerCase() === 'application/json'\n    )\n  )\n}\n\nexport function GetContentType(headers?: { [key: string]: string | string[] }): string {\n  if (!headers) return ''\n\n  // Check for content-type (case-insensitive)\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === 'content-type') {\n      return Array.isArray(value) ? value[0] : value\n    }\n  }\n\n  // Check for accept header as fallback\n  for (const [key, value] of Object.entries(headers)) {\n    if (key.toLowerCase() === 'accept') {\n      return Array.isArray(value) ? value[0] : value\n    }\n  }\n\n  return ''\n}\n\nexport function HasBody(body: any): boolean {\n  if (!body) return false\n\n  if (typeof body === 'string') {\n    return body.length > 0\n  }\n\n  if (typeof body === 'object') {\n    return Object.keys(body).length > 0\n  }\n\n  return false\n}\n\nexport function IsStringBody(body: any): boolean {\n  return typeof body === 'string'\n}\n\nexport function IsObjectBody(body: any): boolean {\n  return body !== null && body !== undefined && typeof body === 'object'\n}\n\nexport function ContentTypeIncludes(contentType: string, type: 'json' | 'xml' | 'form' | 'text' | 'blob'): boolean {\n  const lower = contentType.toLowerCase()\n\n  switch (type) {\n    case 'json':\n      return lower.includes('application/json')\n    case 'xml':\n      return lower.includes('application/xml') || lower.includes('text/xml')\n    case 'form':\n      return lower.includes('application/x-www-form-urlencoded')\n    case 'text':\n      return lower.includes('text/')\n    case 'blob':\n      return lower.includes('application/octet-stream') || lower.includes('image/')\n    default:\n      return false\n  }\n}\n\nexport function InferContentType(body: any): string {\n  if (!body) return 'application/octet-stream'\n\n  // If it's a string, check if it looks like JSON\n  if (typeof body === 'string') {\n    const trimmed = body.trim()\n    if (trimmed.startsWith('{') || trimmed.startsWith('[')) {\n      return 'application/json'\n    }\n    // Check if it's printable UTF-8 text\n    // For simplicity, assume non-empty strings are text\n    if (trimmed.length > 0) {\n      return 'text/plain; charset=utf-8'\n    }\n    return 'application/octet-stream'\n  }\n\n  // If it's an object, assume JSON\n  if (typeof body === 'object') {\n    return 'application/json'\n  }\n\n  // Default to binary\n  return 'application/octet-stream'\n}\n\nexport function GetEffectiveContentType(\n  headers?: { [key: string]: string | string[] },\n  body?: any\n): { contentType: string; wasInferred: boolean } {\n  const explicit = GetContentType(headers)\n\n  if (explicit) {\n    return { contentType: explicit, wasInferred: false }\n  }\n\n  // No explicit Content-Type, infer from body\n  const inferred = InferContentType(body)\n  return { contentType: inferred, wasInferred: true }\n}\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'c',\n  client: 'libcurl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('#include <stdio.h>')\n    builder.line('#include <curl/curl.h>')\n    builder.line()\n    builder.line('int main(void) {')\n    builder.indent()\n    builder.line('CURL *curl;')\n    builder.line('CURLcode res;')\n    builder.line()\n    builder.line('curl_global_init(CURL_GLOBAL_DEFAULT);')\n    builder.line('curl = curl_easy_init();')\n    builder.line('if(curl) {')\n    builder.indent()\n\n    // Build URL with parameters using multi-line string concatenation\n    if (http.params && Object.keys(http.params).length > 0) {\n      const params = new URLSearchParams()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            params.append(key, val)\n          }\n        } else {\n          params.append(key, value)\n        }\n      }\n      const paramString = params.toString()\n      if (paramString) {\n        const separator = http.url.includes('?') ? '&' : '?'\n        const paramParts = paramString.split('&')\n\n        builder.line('curl_easy_setopt(curl, CURLOPT_URL,')\n        builder.indent()\n        builder.line(`\"${http.url}\"`)\n        builder.line(`\"${separator}${paramParts[0]}\"`)\n        for (let i = 1; i < paramParts.length; i++) {\n          builder.line(`\"&${paramParts[i]}\"`)\n        }\n        builder.outdent()\n        builder.line(');')\n      } else {\n        builder.line(`curl_easy_setopt(curl, CURLOPT_URL, \"${http.url}\");`)\n      }\n    } else {\n      builder.line(`curl_easy_setopt(curl, CURLOPT_URL, \"${http.url}\");`)\n    }\n\n    if (http.method.toUpperCase() === 'POST') {\n      builder.line('curl_easy_setopt(curl, CURLOPT_POST, 1L);')\n    } else if (http.method.toUpperCase() !== 'GET') {\n      builder.line(`curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"${http.method.toUpperCase()}\");`)\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      builder.line('struct curl_slist *headers = NULL;')\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`headers = curl_slist_append(headers, \"${key}: ${val}\");`))\n        } else {\n          builder.line(`headers = curl_slist_append(headers, \"${key}: ${value}\");`)\n        }\n      }\n      builder.line('curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);')\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`curl_easy_setopt(curl, CURLOPT_COOKIE, \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (IsStringBody(http.body)) {\n        builder.line(`curl_easy_setopt(curl, CURLOPT_POSTFIELDS, \"${http.body.replace(/\"/g, '\\\\\"')}\");`)\n      } else {\n        // For objects (JSON or form data), stringify as JSON\n        builder.line('curl_easy_setopt(curl, CURLOPT_POSTFIELDS, R\"(')\n        builder.json(http.body)\n        builder.append(')\");')\n      }\n    }\n\n    builder.line()\n    builder.line('res = curl_easy_perform(curl);')\n    builder.line('if(res != CURLE_OK)')\n    builder.indent()\n    builder.line('fprintf(stderr, \"failed: %s\", curl_easy_strerror(res));')\n    builder.outdent()\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line('curl_slist_free_all(headers);')\n    }\n    builder.line('curl_easy_cleanup(curl);')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n    builder.line('curl_global_cleanup();')\n    builder.line('return 0;')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'csharp',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('using System;')\n    builder.line('using System.Net.Http;')\n    builder.line('using System.Threading.Tasks;')\n    builder.line('using System.Web;')\n    builder.line()\n    builder.line('namespace HttpClientExample')\n    builder.line('{')\n    builder.indent()\n    builder.line('class Program')\n    builder.line('{')\n    builder.indent()\n    builder.line('static async Task Main(string[] args)')\n    builder.line('{')\n    builder.indent()\n    builder.line('using (HttpClient client = new HttpClient())')\n    builder.line('{')\n    builder.indent()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('var uriBuilder = new UriBuilder(\"' + http.url + '\");')\n      builder.line('var query = HttpUtility.ParseQueryString(uriBuilder.Query);')\n\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`query.Add(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`query.Add(\"${key}\", \"${value}\");`)\n        }\n      }\n\n      builder.line('uriBuilder.Query = query.ToString();')\n      builder.line(\n        `HttpRequestMessage request = new HttpRequestMessage(HttpMethod.${http.method.toUpperCase()}, uriBuilder.ToString());`\n      )\n    } else {\n      builder.line(\n        `HttpRequestMessage request = new HttpRequestMessage(HttpMethod.${http.method.toUpperCase()}, \"${http.url}\");`\n      )\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.Headers.Add(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`request.Headers.Add(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request.Headers.Add(\"Cookie\", \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('var formContent = new FormUrlEncodedContent(new Dictionary<string, string>')\n        builder.line('{')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`{ \"${key}\", \"${value}\" },`)\n        }\n        builder.outdent()\n        builder.line('});')\n        builder.line('request.Content = formContent;')\n      } else {\n        // Default to JSON (if content-type is json or not specified)\n        builder.line('request.Content = new StringContent(')\n        builder.json(http.body)\n        builder.append(', System.Text.Encoding.UTF8, \"application/json\");')\n      }\n    }\n\n    builder.line()\n    builder.line('HttpResponseMessage response = await client.SendAsync(request);')\n    builder.line('response.EnsureSuccessStatusCode();')\n    builder.line('string responseBody = await response.Content.ReadAsStringAsync();')\n    builder.line('Console.WriteLine(responseBody);')\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes, IsStringBody } from '../utils/utils'\n\nexport default {\n  language: 'csharp',\n  client: 'restsharp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('using RestSharp;')\n    if (config.handleErrors) {\n      builder.line('using System;')\n    }\n    builder.line()\n    builder.line('namespace RestSharpExample')\n    builder.line('{')\n    builder.indent()\n    builder.line('class Program')\n    builder.line('{')\n    builder.indent()\n    builder.line('static void Main(string[] args)')\n    builder.line('{')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try')\n      builder.line('{')\n      builder.indent()\n    }\n\n    builder.line(`var client = new RestClient(\"${http.url}\");`)\n    builder.line(`var request = new RestRequest(Method.${http.method.toUpperCase()});`)\n\n    // Add URL parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`request.AddParameter(\"${key}\", \"${val}\", ParameterType.QueryString);`)\n          }\n        } else {\n          builder.line(`request.AddParameter(\"${key}\", \"${value}\", ParameterType.QueryString);`)\n        }\n      }\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.AddHeader(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`request.AddHeader(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookies = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request.AddHeader(\"Cookie\", \"${cookies}\");`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('request.AddParameter(\"application/x-www-form-urlencoded\", ')\n        builder.json(http.body)\n        builder.append(', ParameterType.RequestBody);')\n      } else if (IsStringBody(http.body)) {\n        builder.line(\n          `request.AddParameter(\"${contentType || 'text/plain'}\", \"${http.body.replace(/\"/g, '\\\\\"')}\", ParameterType.RequestBody);`\n        )\n      } else {\n        // Default to JSON\n        builder.line('request.AddJsonBody(')\n        builder.json(http.body)\n        builder.append(');')\n      }\n    }\n\n    builder.line()\n    builder.line('IRestResponse response = client.Execute(request);')\n    builder.line('Console.WriteLine(response.Content);')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('}')\n      builder.line('catch (Exception ex)')\n      builder.line('{')\n      builder.indent()\n      builder.line('Console.WriteLine($\"Error: {ex.Message}\");')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'dart',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n    const needsJsonEncode =\n      hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n\n    builder.line(\"import 'package:http/http.dart' as http;\")\n    if (needsJsonEncode) {\n      builder.line(\"import 'dart:convert';\")\n    }\n    builder.line()\n\n    builder.line('void main() async {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(\"var url = Uri.parse('\" + http.url + \"').replace(queryParameters: {\")\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`'${key}': [${value.map((v) => `'${v}'`).join(', ')}],`)\n        } else {\n          builder.line(`'${key}': '${value}',`)\n        }\n      }\n      builder.outdent()\n      builder.line('});')\n    } else {\n      builder.line(`var url = Uri.parse('${http.url}');`)\n    }\n    builder.line()\n\n    // Build headers map\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line('var headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`'${key}': '${value.join(', ')}',`)\n        } else {\n          builder.line(`'${key}': '${value}',`)\n        }\n      }\n      builder.outdent()\n      builder.line('};')\n      builder.line()\n    }\n\n    // Build body\n    let bodyVar = 'null'\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('var body = jsonEncode(')\n        builder.json(http.body)\n        builder.append(');')\n        bodyVar = 'body'\n        builder.line()\n      } else if (IsStringBody(http.body)) {\n        builder.line(`var body = '${http.body.replace(/'/g, \"\\\\'\")}';`)\n        bodyVar = 'body'\n        builder.line()\n      }\n    }\n\n    // Make request\n    const method = http.method.toLowerCase()\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n\n    if (method === 'get') {\n      builder.line(`var response = await http.get(url${hasHeaders ? ', headers: headers' : ''});`)\n    } else if (method === 'post') {\n      builder.line(\n        `var response = await http.post(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'put') {\n      builder.line(\n        `var response = await http.put(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'delete') {\n      builder.line(\n        `var response = await http.delete(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    } else if (method === 'patch') {\n      builder.line(\n        `var response = await http.patch(url${hasHeaders ? ', headers: headers' : ''}${bodyVar !== 'null' ? ', body: ' + bodyVar : ''});`\n      )\n    }\n\n    builder.line()\n    builder.line('print(response.body);')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (e) {')\n      builder.indent()\n      builder.line('print(\"Error: $e\");')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'go',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n',\n\n      json: {\n        objOpen: 'map[string]any{',\n        objClose: '}',\n        arrOpen: '[]any{',\n        arrClose: '}',\n        separator: ': ',\n        endComma: false\n      }\n    })\n\n    const contentType = GetContentType(http.headers)\n    const hasBody = HasBody(http.body)\n    const isJsonBody =\n      hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n    const isFormBody = hasBody && ContentTypeIncludes(contentType, 'form')\n    const needsBytes = isJsonBody || isFormBody\n\n    builder.line('package main')\n    builder.line()\n    builder.line('import (')\n    builder.indent()\n    builder.line('\"fmt\"')\n    builder.line('\"net/http\"')\n    builder.line('\"io\"')\n    if (needsBytes) {\n      builder.line('\"bytes\"')\n    }\n    if (isJsonBody) {\n      builder.line('\"encoding/json\"')\n    }\n    if (isFormBody || (http.params && Object.keys(http.params).length > 0)) {\n      builder.line('\"net/url\"')\n    }\n    if (config.handleErrors) {\n      builder.line('\"log\"')\n    }\n    builder.outdent()\n    builder.line(')')\n    builder.line()\n    builder.line('func main() {')\n    builder.indent()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(`baseURL := \"${http.url}\"`)\n      builder.line('u, err := url.Parse(baseURL)')\n      if (config.handleErrors) {\n        builder.line('if err != nil {')\n        builder.indent()\n        builder.line('log.Fatal(err)')\n        builder.outdent()\n        builder.line('}')\n      }\n      builder.line('q := u.Query()')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`q.Add(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`q.Set(\"${key}\", \"${value}\")`)\n        }\n      }\n      builder.line('u.RawQuery = q.Encode()')\n      builder.line('url := u.String()')\n    } else {\n      builder.line(`url := \"${http.url}\"`)\n    }\n    builder.line()\n\n    let bodyVar = 'nil'\n    if (isJsonBody) {\n      builder.line('jsonBodyMap := ')\n      builder.json(http.body)\n\n      if (config.handleErrors) {\n        builder.line('jsonBodyBytes, err := json.Marshal(jsonBodyMap)')\n        builder.line('if err != nil {')\n        builder.indent()\n        builder.line('log.Fatal(err)')\n        builder.outdent()\n        builder.line('}')\n      } else {\n        builder.line('jsonBodyBytes, _ := json.Marshal(jsonBodyMap)')\n      }\n      bodyVar = 'bytes.NewBuffer(jsonBodyBytes)'\n      builder.line()\n    } else if (isFormBody) {\n      builder.line('formData := url.Values{}')\n      for (const [key, value] of Object.entries(http.body)) {\n        builder.line(`formData.Set(\"${key}\", \"${value}\")`)\n      }\n      builder.line('formBody := formData.Encode()')\n      bodyVar = 'bytes.NewBufferString(formBody)'\n      builder.line()\n    } else if (hasBody && typeof http.body === 'string') {\n      bodyVar = `bytes.NewBufferString(\"${http.body.replace(/\"/g, '\\\\\"')}\")`\n    }\n\n    if (config.handleErrors) {\n      builder.line(`req, err := http.NewRequest(\"${http.method.toUpperCase()}\", url, ${bodyVar})`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n      builder.line()\n    } else {\n      builder.line(`req, _ := http.NewRequest(\"${http.method.toUpperCase()}\", url, ${bodyVar})`)\n      builder.line()\n    }\n\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.Header.Add(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`req.Header.Set(\"${key}\", \"${value}\")`)\n        }\n      }\n\n      builder.line()\n    }\n\n    if (http.cookies) {\n      for (const [key, value] of Object.entries(http.cookies)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.AddCookie(&http.Cookie{Name: \"${key}\", Value: \"${val}\"})`)\n          }\n        } else {\n          builder.line(`req.AddCookie(&http.Cookie{Name: \"${key}\", Value: \"${value}\"})`)\n        }\n      }\n\n      builder.line()\n    }\n\n    if (config.handleErrors) {\n      builder.line(`resp, err := http.DefaultClient.Do(req)`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line(`resp, _ := http.DefaultClient.Do(req)`)\n    }\n\n    builder.line(`defer resp.Body.Close()`)\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line(`body, err := io.ReadAll(resp.Body)`)\n      builder.line(`if err != nil {`)\n      builder.indent()\n      builder.line('log.Fatal(err)')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line(`body, _ := io.ReadAll(resp.Body)`)\n    }\n\n    builder.line()\n    builder.line(`fmt.Println(string(body))`)\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'java',\n  client: 'httpurlconnection',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n\n    builder.line('import java.io.*;')\n    builder.line('import java.net.*;')\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('import java.net.URLEncoder;')\n    }\n    if (hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))) {\n      builder.line('import org.json.JSONObject;')\n    }\n    builder.line()\n\n    builder.line('public class HttpExample {')\n    builder.indent()\n    builder.line('public static void main(String[] args) {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line(`String baseUrl = \"${http.url}\";`)\n      builder.line('StringBuilder urlBuilder = new StringBuilder(baseUrl);')\n      builder.line('urlBuilder.append(baseUrl.contains(\"?\") ? \"&\" : \"?\");')\n      builder.line()\n      builder.line('String[] paramPairs = {')\n      builder.indent()\n      const paramPairs: string[] = []\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            paramPairs.push(`\"${key}=\" + URLEncoder.encode(\"${val}\", \"UTF-8\")`)\n          }\n        } else {\n          paramPairs.push(`\"${key}=\" + URLEncoder.encode(\"${value}\", \"UTF-8\")`)\n        }\n      }\n      for (let i = 0; i < paramPairs.length; i++) {\n        if (i === paramPairs.length - 1) {\n          builder.line(paramPairs[i])\n        } else {\n          builder.line(paramPairs[i] + ',')\n        }\n      }\n      builder.outdent()\n      builder.line('};')\n      builder.line()\n      builder.line('for (int i = 0; i < paramPairs.length; i++) {')\n      builder.indent()\n      builder.line('if (i > 0) urlBuilder.append(\"&\");')\n      builder.line('urlBuilder.append(paramPairs[i]);')\n      builder.outdent()\n      builder.line('}')\n      builder.line()\n      builder.line('URL url = new URL(urlBuilder.toString());')\n    } else {\n      builder.line(`URL url = new URL(\"${http.url}\");`)\n    }\n    builder.line('HttpURLConnection conn = (HttpURLConnection) url.openConnection();')\n    builder.line(`conn.setRequestMethod(\"${http.method.toUpperCase()}\");`)\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`conn.setRequestProperty(\"${key}\", \"${val}\");`))\n        } else {\n          builder.line(`conn.setRequestProperty(\"${key}\", \"${value}\");`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`conn.setRequestProperty(\"Cookie\", \"${cookieString}\");`)\n    }\n\n    if (hasBody) {\n      builder.line()\n      builder.line('conn.setDoOutput(true);')\n      builder.line()\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('JSONObject jsonBody = new JSONObject();')\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`jsonBody.put(\"${key}\", \"${value}\");`)\n          } else if (typeof value === 'number' || typeof value === 'boolean') {\n            builder.line(`jsonBody.put(\"${key}\", ${value});`)\n          } else if (value === null) {\n            builder.line(`jsonBody.put(\"${key}\", JSONObject.NULL);`)\n          } else {\n            builder.line(`jsonBody.put(\"${key}\", ${JSON.stringify(value)});`)\n          }\n        }\n        builder.line()\n        builder.line('try (OutputStream os = conn.getOutputStream()) {')\n        builder.indent()\n        builder.line('byte[] input = jsonBody.toString().getBytes(\"utf-8\");')\n        builder.line('os.write(input, 0, input.length);')\n        builder.outdent()\n        builder.line('}')\n      } else if (IsStringBody(http.body)) {\n        builder.line('try (OutputStream os = conn.getOutputStream()) {')\n        builder.indent()\n        builder.line(`byte[] input = \"${http.body.replace(/\"/g, '\\\\\"')}\".getBytes(\"utf-8\");`)\n        builder.line('os.write(input, 0, input.length);')\n        builder.outdent()\n        builder.line('}')\n      }\n    }\n\n    builder.line()\n    builder.line('int responseCode = conn.getResponseCode();')\n    builder.line('BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));')\n    builder.line('String inputLine;')\n    builder.line('StringBuilder response = new StringBuilder();')\n    builder.line()\n    builder.line('while ((inputLine = in.readLine()) != null) {')\n    builder.indent()\n    builder.line('response.append(inputLine);')\n    builder.outdent()\n    builder.line('}')\n    builder.line('in.close();')\n    builder.line()\n    builder.line('System.out.println(response.toString());')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (Exception e) {')\n      builder.indent()\n      builder.line('e.printStackTrace();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'java',\n  client: 'okhttp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n    const needsJson = hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))\n\n    builder.line('import okhttp3.*;')\n    if (needsJson) {\n      builder.line('import org.json.JSONObject;')\n    }\n    if (contentType && ContentTypeIncludes(contentType, 'form')) {\n      builder.line('import java.util.*;')\n    }\n    builder.line()\n\n    builder.line('public class HttpExample {')\n    builder.indent()\n    builder.line('public static void main(String[] args) {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('OkHttpClient client = new OkHttpClient();')\n    builder.line()\n\n    // Build request body if needed\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('FormBody.Builder formBuilder = new FormBody.Builder();')\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`formBuilder.add(\"${key}\", \"${value}\");`)\n        }\n        builder.line('RequestBody body = formBuilder.build();')\n      } else if (needsJson) {\n        builder.line('JSONObject jsonBody = new JSONObject();')\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`jsonBody.put(\"${key}\", \"${value}\");`)\n          } else if (typeof value === 'number' || typeof value === 'boolean') {\n            builder.line(`jsonBody.put(\"${key}\", ${value});`)\n          } else if (value === null) {\n            builder.line(`jsonBody.put(\"${key}\", JSONObject.NULL);`)\n          } else {\n            builder.line(`jsonBody.put(\"${key}\", ${JSON.stringify(value)});`)\n          }\n        }\n        builder.line('RequestBody body = RequestBody.create(')\n        builder.indent()\n        builder.line('jsonBody.toString(),')\n        builder.line('MediaType.parse(\"application/json; charset=utf-8\")')\n        builder.outdent()\n        builder.line(');')\n      } else if (IsStringBody(http.body)) {\n        builder.line('RequestBody body = RequestBody.create(')\n        builder.indent()\n        builder.line(`\"${http.body.replace(/\"/g, '\\\\\"')}\",`)\n        builder.line(`MediaType.parse(\"${contentType || 'text/plain'}; charset=utf-8\")`)\n        builder.outdent()\n        builder.line(');')\n      }\n      builder.line()\n    }\n\n    // Build request\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('HttpUrl.Builder urlBuilder = HttpUrl.parse(\"' + http.url + '\").newBuilder();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`urlBuilder.addQueryParameter(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`urlBuilder.addQueryParameter(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('HttpUrl url = urlBuilder.build();')\n      builder.line()\n    }\n\n    builder.line('Request.Builder requestBuilder = new Request.Builder()')\n    builder.indent()\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('.url(url)')\n    } else {\n      builder.line(`.url(\"${http.url}\")`)\n    }\n\n    if (hasBody) {\n      builder.line('.method(\"' + http.method.toUpperCase() + '\", body)')\n    } else {\n      builder.line('.method(\"' + http.method.toUpperCase() + '\", null)')\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.addHeader(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.addHeader(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`.addHeader(\"Cookie\", \"${cookieString}\")`)\n    }\n\n    builder.line('.build();')\n    builder.outdent()\n    builder.line()\n    builder.line('Request request = requestBuilder;')\n    builder.line('Response response = client.newCall(request).execute();')\n    builder.line()\n    builder.line('System.out.println(response.body().string());')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (Exception e) {')\n      builder.indent()\n      builder.line('e.printStackTrace();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetEffectiveContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'javascript',\n  client: 'fetch',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('const url = new URL(\"' + http.url + '\");')\n      builder.line('const params = new URLSearchParams();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`params.append(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`params.set(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('url.search = params.toString();')\n      builder.line()\n      builder.line('fetch(url.toString(), {')\n    } else {\n      builder.line('fetch(\"' + http.url + '\", {')\n    }\n    builder.indent()\n    builder.line(`method: \"${http.method.toUpperCase()}\",`)\n\n    // Headers\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Note: Cookies are not supported in the fetch API\n    // Cookies\n    // if (http.cookies) {\n    // }\n\n    if (http.body) {\n      builder.line('body: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    // Determine response parsing method based on content-type or accept headers\n    // For responses, only use explicit headers (don't infer from request body)\n    const { contentType: responseType, wasInferred } = GetEffectiveContentType(http.headers)\n    let parseMethod = 'text()' // Default to text() for safety when no Content-Type\n\n    // Only change from default if we have an explicit header (not inferred octet-stream)\n    if (!wasInferred || responseType !== 'application/octet-stream') {\n      if (ContentTypeIncludes(responseType, 'json')) {\n        parseMethod = 'json()'\n      } else if (ContentTypeIncludes(responseType, 'xml')) {\n        parseMethod = 'text()' // XML is typically parsed as text, then processed with DOMParser\n      } else if (ContentTypeIncludes(responseType, 'text')) {\n        parseMethod = 'text()'\n      } else if (ContentTypeIncludes(responseType, 'blob')) {\n        parseMethod = 'blob()'\n      }\n    }\n\n    // Add comment if content-type was inferred for non-default responses\n    if (wasInferred && parseMethod === 'json()') {\n      builder.line(`// Response Content-Type inferred as: ${responseType}`)\n    }\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('if (!response.ok) {')\n      builder.indent()\n      builder.line('throw new Error(\"Network response was not ok\");')\n      builder.outdent()\n      builder.line('}')\n      builder.line(`return response.${parseMethod};`)\n      builder.outdent()\n      builder.line('})')\n      builder.line('.then(data => console.log(data))')\n      builder.line('.catch(error => console.error(\"There was a problem with the fetch operation:\", error));')\n    } else {\n      builder.line(`.then(response => response.${parseMethod})`)\n      builder.line('.then(data => console.log(data));')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  language: 'javascript',\n  client: 'axios',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('axios({')\n    builder.indent()\n    builder.line(`method: \"${http.method.toLowerCase()}\",`)\n    builder.line(`url: \"${http.url}\",`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('params: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Headers\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    // Cookies\n    if (http.cookies) {\n      builder.line('cookies: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`\"${key}\": \"${value}\",`)\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('data: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('console.log(response.data);')\n      builder.outdent()\n      builder.line('})')\n      builder.line('.catch(error => {')\n      builder.indent()\n      builder.line('console.error(\"There was an error:\", error);')\n      builder.outdent()\n      builder.line('});')\n    } else {\n      builder.line('.then(response => console.log(response.data));')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  language: 'javascript',\n  client: 'jquery',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('$.ajax({')\n    builder.indent()\n    builder.line(`url: \"${http.url}\",`)\n    builder.line(`type: \"${http.method.toUpperCase()}\",`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('data: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('data: ')\n      builder.json(http.body)\n      builder.append(',')\n      builder.line('contentType: \"application/json\",')\n    }\n\n    // Note: Cookies are not supported in jQuery\n\n    builder.line('success: function(data) {')\n    builder.indent()\n    builder.line('console.log(data);')\n    builder.outdent()\n    builder.line('},')\n\n    if (config.handleErrors) {\n      builder.line('error: function(jqXHR, textStatus, errorThrown) {')\n      builder.indent()\n      builder.line('console.error(\"Request failed:\", textStatus, errorThrown);')\n      builder.outdent()\n      builder.line('},')\n    }\n\n    builder.outdent()\n    builder.line('});')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'kotlin',\n  client: 'ktor',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const hasBody = HasBody(http.body)\n    const contentType = GetContentType(http.headers)\n\n    builder.line('import io.ktor.client.*')\n    builder.line('import io.ktor.client.engine.cio.*')\n    builder.line('import io.ktor.client.request.*')\n    builder.line('import io.ktor.client.statement.*')\n    if (hasBody && (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body)))) {\n      builder.line('import io.ktor.http.*')\n      builder.line('import kotlinx.serialization.json.*')\n    }\n    if (contentType && ContentTypeIncludes(contentType, 'form')) {\n      builder.line('import io.ktor.http.*')\n    }\n    builder.line()\n\n    builder.line('suspend fun main() {')\n    builder.indent()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('val client = HttpClient(CIO)')\n    builder.line()\n    builder.line(`val response: HttpResponse = client.${http.method.toLowerCase()} {`)\n    builder.indent()\n    builder.line(`url(\"${http.url}\")`)\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`parameter(\"${key}\", \"${val}\")`)\n          }\n        } else {\n          builder.line(`parameter(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`header(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`header(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`header(\"Cookie\", \"${cookieString}\")`)\n    }\n\n    if (hasBody) {\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('setBody(')\n        builder.indent()\n        builder.line('FormDataContent(Parameters.build {')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          builder.line(`append(\"${key}\", \"${value}\")`)\n        }\n        builder.outdent()\n        builder.line('})')\n        builder.outdent()\n        builder.line(')')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('contentType(ContentType.Application.Json)')\n        builder.line('setBody(')\n        builder.indent()\n        builder.line('buildJsonObject {')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.body)) {\n          if (typeof value === 'string') {\n            builder.line(`put(\"${key}\", \"${value}\")`)\n          } else if (typeof value === 'number') {\n            builder.line(`put(\"${key}\", ${value})`)\n          } else if (typeof value === 'boolean') {\n            builder.line(`put(\"${key}\", ${value})`)\n          } else if (value === null) {\n            builder.line(`put(\"${key}\", JsonNull)`)\n          } else {\n            builder.line(`put(\"${key}\", JsonPrimitive(${JSON.stringify(value)}))`)\n          }\n        }\n        builder.outdent()\n        builder.line('}')\n        builder.outdent()\n        builder.line(')')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`setBody(\"${http.body.replace(/\"/g, '\\\\\"')}\")`)\n      }\n    }\n\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n    builder.line('println(response.bodyAsText())')\n    builder.line('client.close()')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (e: Exception) {')\n      builder.indent()\n      builder.line('println(\"Error: ${e.message}\")')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { ParseUrl } from '../utils/utils'\n\nexport default {\n  language: 'node',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('const http = require(\"http\");')\n    builder.line()\n\n    const { hostname, path, port, protocol } = ParseUrl(http.url)\n\n    // Build path with parameters\n    let finalPath = path\n    if (http.params && Object.keys(http.params).length > 0) {\n      const params = new URLSearchParams()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            params.append(key, val)\n          }\n        } else {\n          params.append(key, value)\n        }\n      }\n      const paramString = params.toString()\n      if (paramString) {\n        const separator = path.includes('?') ? '&' : '?'\n        finalPath = `${path}${separator}${paramString}`\n      }\n    }\n\n    builder.line('const options = {')\n    builder.indent()\n    builder.line(`method: \"${http.method.toUpperCase()}\",`)\n    builder.line(`hostname: \"${hostname}\",`)\n    builder.line(`path: \"${finalPath}\",`)\n\n    if (http.headers || http.cookies) {\n      builder.line('headers: {')\n      builder.indent()\n\n      if (http.headers) {\n        for (const [key, value] of Object.entries(http.headers)) {\n          if (Array.isArray(value)) {\n            builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n          } else {\n            builder.line(`\"${key}\": \"${value}\",`)\n          }\n        }\n      }\n\n      if (http.cookies) {\n        const cookieString = Object.entries(http.cookies)\n          .map(([key, value]) => `${key}=${value}`)\n          .join('; ')\n        builder.line(`\"Cookie\": \"${cookieString}\",`)\n      }\n\n      builder.outdent()\n      builder.line('},')\n    }\n    builder.outdent()\n    builder.line('};')\n    builder.line()\n\n    builder.line('const req = http.request(options, (res) => {')\n    builder.indent()\n    builder.line('let data = \"\";')\n    builder.line()\n    builder.line('res.on(\"data\", (chunk) => {')\n    builder.indent()\n    builder.line('data += chunk;')\n    builder.outdent()\n    builder.line('});')\n    builder.line()\n    builder.line('res.on(\"end\", () => {')\n    builder.indent()\n    builder.line('console.log(data);')\n    builder.outdent()\n    builder.line('});')\n    builder.outdent()\n    builder.line('});')\n\n    if (config.handleErrors) {\n      builder.line()\n      builder.line('req.on(\"error\", (error) => {')\n      builder.indent()\n      builder.line('console.error(error);')\n      builder.outdent()\n      builder.line('});')\n    }\n\n    builder.line()\n\n    if (http.body) {\n      builder.line('req.write(')\n      builder.json(http.body)\n      builder.append(');')\n    }\n    builder.line('req.end();')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'node',\n  client: 'fetch',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('const fetch = require(\"node-fetch\");')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('const url = new URL(\"' + http.url + '\");')\n      builder.line('const params = new URLSearchParams();')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`params.append(\"${key}\", \"${val}\");`)\n          }\n        } else {\n          builder.line(`params.set(\"${key}\", \"${value}\");`)\n        }\n      }\n      builder.line('url.search = params.toString();')\n      builder.line()\n      builder.line('fetch(url.toString(), {')\n    } else {\n      builder.line('fetch(\"' + http.url + '\", {')\n    }\n    builder.indent()\n    builder.line('method: \"' + http.method.toUpperCase() + '\",')\n\n    if (http.headers) {\n      builder.line('headers: {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('},')\n    }\n\n    if (http.body) {\n      builder.line('body: ')\n      builder.json(http.body)\n    }\n\n    builder.outdent()\n    builder.line('})')\n\n    // Determine response parsing method based on content-type or accept headers\n    const responseType = GetContentType(http.headers)\n    let parseMethod = 'text()'\n\n    if (ContentTypeIncludes(responseType, 'json')) {\n      parseMethod = 'json()'\n    } else if (ContentTypeIncludes(responseType, 'xml')) {\n      parseMethod = 'text()'\n    } else if (ContentTypeIncludes(responseType, 'text')) {\n      parseMethod = 'text()'\n    } else if (ContentTypeIncludes(responseType, 'blob')) {\n      parseMethod = 'blob()'\n    }\n\n    if (config.handleErrors) {\n      builder.line('.then(response => {')\n      builder.indent()\n      builder.line('if (!response.ok) {')\n      builder.indent()\n      builder.line('throw new Error(\"response not ok\");')\n      builder.outdent()\n      builder.line('}')\n      builder.line(`return response.${parseMethod};`)\n      builder.outdent()\n      builder.line('})')\n      builder.line('.then(data => console.log(data))')\n      builder.line('.catch(error => console.error(\"error:\", error));')\n    } else {\n      builder.line(`.then(response => response.${parseMethod})`)\n      builder.line('.then(data => console.log(data))')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'php',\n  client: 'curl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    // Start our PHP file\n    builder.line('<?php')\n    builder.line()\n\n    // Initialize cURL\n    builder.line('$ch = curl_init();')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('$url = \"' + http.url + '\";')\n      builder.line('$params = [];')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`$params[] = \"${key}=\" . urlencode(\"${val}\");`)\n          }\n        } else {\n          builder.line(`$params[] = \"${key}=\" . urlencode(\"${value}\");`)\n        }\n      }\n      builder.line('$url .= (strpos($url, \"?\") !== false ? \"&\" : \"?\") . implode(\"&\", $params);')\n      builder.line()\n      builder.line('curl_setopt($ch, CURLOPT_URL, $url);')\n    } else {\n      builder.line(`curl_setopt($ch, CURLOPT_URL, \"${http.url}\");`)\n    }\n    builder.line('curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);')\n    builder.line(`curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"${http.method.toUpperCase()}\");`)\n\n    // Headers\n    if (http.headers) {\n      builder.line()\n      builder.line('$headers = [];')\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`$headers[] = \"${key}: ${val}\";`))\n        } else {\n          builder.line(`$headers[] = \"${key}: ${value}\";`)\n        }\n      }\n      builder.line('curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);')\n    }\n\n    // Cookies\n    if (http.cookies) {\n      builder.line()\n      builder.line('$cookies = [];')\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`$cookies[] = \"${key}=${value}\";`)\n      }\n      builder.line('curl_setopt($ch, CURLOPT_COOKIE, implode(\"; \", $cookies));')\n    }\n\n    // Body\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('$postData = ')\n        builder.json(http.body)\n        builder.append(';')\n        builder.line('curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($postData));')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('curl_setopt($ch, CURLOPT_POSTFIELDS,')\n        builder.line('<<<JSON')\n        builder.line()\n        builder.json(http.body)\n        builder.line('JSON')\n        builder.line(');')\n      } else if (IsStringBody(http.body)) {\n        const escapedBody = http.body.replace(/'/g, \"\\\\'\")\n        builder.line(`curl_setopt($ch, CURLOPT_POSTFIELDS, '${escapedBody}');`)\n      }\n    }\n\n    // Execute and handle response\n    builder.line()\n    builder.line('$response = curl_exec($ch);')\n\n    if (config.handleErrors) {\n      builder.line('if (curl_errno($ch)) {')\n      builder.indent()\n      builder.line('echo \"Error: \" . curl_error($ch);')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    builder.line('curl_close($ch);')\n    builder.line()\n    builder.line('echo $response;')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'php',\n  client: 'guzzle',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n',\n      json: {\n        objOpen: '[',\n        objClose: ']',\n        arrOpen: '[',\n        arrClose: ']',\n        separator: ' => ',\n        endComma: true\n      }\n    })\n\n    builder.line('<?php')\n    builder.line()\n    builder.line(\"require 'vendor/autoload.php';\")\n    builder.line()\n    builder.line('use GuzzleHttp\\\\Client;')\n    if (config.handleErrors) {\n      builder.line('use GuzzleHttp\\\\Exception\\\\RequestException;')\n    }\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try {')\n      builder.indent()\n    }\n\n    builder.line('$client = new Client();')\n    builder.line('$response = $client->request(')\n    builder.indent()\n    builder.line('\"' + http.method.toUpperCase() + '\",')\n    builder.line('\"' + http.url + '\",')\n\n    // Headers, query params, and body\n    if (http.headers || http.cookies || http.body || http.params) {\n      builder.line('[')\n\n      // Query parameters\n      if (http.params && Object.keys(http.params).length > 0) {\n        builder.indent()\n        builder.line('\"query\" => [')\n        builder.indent()\n        for (const [key, value] of Object.entries(http.params)) {\n          if (Array.isArray(value)) {\n            for (const val of value) {\n              builder.line(`\"${key}\" => \"${val}\",`)\n            }\n          } else {\n            builder.line(`\"${key}\" => \"${value}\",`)\n          }\n        }\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.headers) {\n        builder.indent()\n        builder.line('\"headers\" => [')\n        builder.indent()\n\n        for (const [key, value] of Object.entries(http.headers)) {\n          if (Array.isArray(value)) {\n            value.forEach((val) => builder.line(`\"${key}\" => \"${val}\",`))\n          } else {\n            builder.line(`\"${key}\" => \"${value}\",`)\n          }\n        }\n\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.cookies) {\n        builder.indent()\n        builder.line('\"cookies\" => [')\n        builder.indent()\n\n        for (const [key, value] of Object.entries(http.cookies)) {\n          builder.line(`\"${key}\" => \"${value}\",`)\n        }\n\n        builder.outdent()\n        builder.line('],')\n        builder.outdent()\n      }\n\n      if (http.body) {\n        builder.indent()\n        const contentType = GetContentType(http.headers)\n\n        if (ContentTypeIncludes(contentType, 'form')) {\n          builder.line('\"form_params\" => ')\n          builder.json(http.body)\n          builder.append(',')\n        } else {\n          // Default to JSON (if content-type is json or not specified)\n          builder.line('\"json\" => ')\n          builder.json(http.body)\n          builder.append(',')\n        }\n        builder.outdent()\n      }\n\n      // End headers and body\n      builder.line('],')\n    }\n\n    // End request\n    builder.outdent()\n    builder.line(');')\n    builder.line()\n\n    builder.line('echo $response->getBody();')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('} catch (RequestException $e) {')\n      builder.indent()\n      builder.line('echo \"Error: \" . $e->getMessage();')\n      builder.outdent()\n      builder.line('}')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { ParseUrl, GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'python',\n  client: 'http',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n    const method = http.method.toUpperCase()\n    const hasPayload = method !== 'GET' && http.body\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n    const hasCookies = http.cookies && Object.keys(http.cookies).length > 0\n    let params: string[] = []\n\n    builder.line('import http.client')\n    builder.line('import json')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try:')\n      builder.indent()\n    }\n\n    const { hostname, path, port, protocol } = ParseUrl(http.url)\n\n    // Build path with parameters\n    let finalPath = `\"${path}\"`\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('from urllib.parse import urlencode')\n      builder.line('params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n      builder.line('query_string = urlencode(params, doseq=True)')\n      builder.line(`final_path = f\"${path}?{query_string}\"`)\n      finalPath = 'final_path'\n    }\n\n    builder.line(`conn = http.client.HTTPSConnection(\"${hostname}\", ${port})`)\n\n    // Headers\n    if (hasHeaders) {\n      builder.line()\n      params.push('headers')\n      builder.line('headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers!)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": \"${value.join(', ')}\",`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    // Cookies\n    if (hasCookies) {\n      builder.line()\n      params.push('cookies')\n      builder.line('cookies = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies!)) {\n        builder.line(`\"${key}\": \"${value}\",`)\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    // Payload\n    if (hasPayload) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('from urllib.parse import urlencode')\n        builder.line('payload_dict = ')\n        builder.json(http.body)\n        builder.line('payload = urlencode(payload_dict)')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('payload_dict = ')\n        builder.json(http.body)\n        builder.line('payload = json.dumps(payload_dict)')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`payload = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      }\n    }\n\n    // Build request based upon whether headers, cookies and payload are present\n    builder.line()\n    if (hasPayload) {\n      const otherParams = params.filter((p) => p !== 'payload')\n      builder.line(\n        `conn.request(\"${method}\", ${finalPath}, payload` +\n          (otherParams.length > 0 ? `, ${otherParams.join(', ')}` : '') +\n          ')'\n      )\n    } else {\n      builder.line(`conn.request(\"${method}\", ${finalPath}` + (params.length > 0 ? `, ${params.join(', ')}` : '') + ')')\n    }\n    builder.line('res = conn.getresponse()')\n    builder.line('data = res.read()')\n    builder.line()\n    builder.line('print(data.decode(\"utf-8\"))')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('except Exception as e:')\n      builder.indent()\n      builder.line('print(f\"Error: {e}\")')\n      builder.outdent()\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'python',\n  client: 'requests',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    const method = http.method.toUpperCase()\n    const hasPayload = method !== 'GET' && http.body\n    const hasHeaders = http.headers && Object.keys(http.headers).length > 0\n    const hasCookies = http.cookies && Object.keys(http.cookies).length > 0\n    let params: string[] = []\n\n    builder.line('import requests')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('try:')\n      builder.indent()\n    }\n\n    builder.line('url = \"' + http.url + '\"')\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      params.push('params=url_params')\n      builder.line('url_params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\": [${value.map((v) => `\"${v}\"`).join(', ')}]`)\n        } else {\n          builder.line(`\"${key}\": \"${value}\"`)\n        }\n\n        if (Object.keys(http.params).indexOf(key) !== Object.keys(http.params).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasHeaders) {\n      builder.line()\n      params.push('headers=headers')\n      builder.line('headers = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.headers!)) {\n        builder.line(`\"${key}\": \"${value}\"`)\n\n        if (Object.keys(http.headers!).indexOf(key) !== Object.keys(http.headers!).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasCookies) {\n      builder.line()\n      params.push('cookies=cookies')\n      builder.line('cookies = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.cookies!)) {\n        builder.line(`\"${key}\": \"${value}\"`)\n\n        if (Object.keys(http.cookies!).indexOf(key) !== Object.keys(http.cookies!).length - 1) {\n          builder.append(',')\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n    }\n\n    if (hasPayload) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        params.push('data=form_data')\n        builder.line('form_data = ')\n        builder.json(http.body)\n      } else {\n        // Default to JSON (if content-type is json or not specified with object body)\n        params.push('json=json_data')\n        builder.line('json_data = ')\n        builder.json(http.body)\n      }\n    }\n\n    builder.line()\n    builder.line(\n      'response = requests.' +\n        http.method.toLowerCase() +\n        '(url' +\n        (params.length > 0 ? `, ${params.join(', ')}` : '') +\n        ')'\n    )\n    builder.line('print(response.text)')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('except requests.exceptions.RequestException as e:')\n      builder.indent()\n      builder.line('print(f\"Error: {e}\")')\n      builder.outdent()\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'ruby',\n  client: 'nethttp',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('require \"net/http\"')\n    builder.line('require \"uri\"')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('begin')\n      builder.indent()\n    }\n\n    // Build URI with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('uri = URI.parse(\"' + http.url + '\")')\n      builder.line('params = {')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          builder.line(`\"${key}\" => [${value.map((v) => `\"${v}\"`).join(', ')}],`)\n        } else {\n          builder.line(`\"${key}\" => \"${value}\",`)\n        }\n      }\n      builder.outdent()\n      builder.line('}')\n      builder.line('uri.query = URI.encode_www_form(params)')\n    } else {\n      builder.line('uri = URI.parse(\"' + http.url + '\")')\n    }\n\n    if (http.method.toUpperCase() === 'GET') {\n      builder.line('request = Net::HTTP::Get.new(uri)')\n    } else if (http.method.toUpperCase() === 'POST') {\n      builder.line('request = Net::HTTP::Post.new(uri)')\n    } else if (http.method.toUpperCase() === 'PUT') {\n      builder.line('request = Net::HTTP::Put.new(uri)')\n    } else if (http.method.toUpperCase() === 'DELETE') {\n      builder.line('request = Net::HTTP::Delete.new(uri)')\n    } else {\n      builder.line('request = Net::HTTP::GenericRequest.new(\"' + http.method.toUpperCase() + '\", uri.path, nil, nil)')\n    }\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request[\"${key}\"] = \"${val}\"`))\n        } else {\n          builder.line(`request[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`request[\"Cookie\"] = \"${cookieString}\"`)\n    }\n\n    if (http.body) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('request.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`request.body = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      } else {\n        // For form data or other objects, convert to JSON string\n        builder.line('request.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      }\n    }\n\n    builder.line()\n    builder.line('response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == \"https\") do |http|')\n    builder.indent()\n    builder.line('http.request(request)')\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('puts response.body')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('rescue StandardError => e')\n      builder.indent()\n      builder.line('puts \"Error: #{e.message}\"')\n      builder.outdent()\n      builder.line('end')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'ruby',\n  client: 'faraday',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('require \"faraday\"')\n    builder.line()\n\n    if (config.handleErrors) {\n      builder.line('begin')\n      builder.indent()\n    }\n\n    builder.line('conn = Faraday.new(url: \"' + http.url + '\") do |f|')\n    builder.indent()\n    builder.line('f.adapter Faraday.default_adapter')\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('response = conn.' + http.method.toLowerCase() + ' do |req|')\n    builder.indent()\n    builder.line('req.url \"' + http.url + '\"')\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`req.params[\"${key}\"] = \"${val}\"`)\n          }\n        } else {\n          builder.line(`req.params[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.headers) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`req.headers[\"${key}\"] = \"${val}\"`))\n        } else {\n          builder.line(`req.headers[\"${key}\"] = \"${value}\"`)\n        }\n      }\n    }\n\n    if (http.cookies) {\n      builder.line()\n      const cookieString = Object.entries(http.cookies)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('; ')\n      builder.line(`req.headers[\"Cookie\"] = \"${cookieString}\"`)\n    }\n\n    if (http.body) {\n      builder.line()\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('req.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`req.body = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n      } else {\n        // For form data or other objects, convert to JSON string\n        builder.line('req.body = ')\n        builder.json(http.body)\n        builder.append('.to_json')\n      }\n    }\n\n    builder.outdent()\n    builder.line('end')\n    builder.line()\n    builder.line('puts response.body')\n\n    if (config.handleErrors) {\n      builder.outdent()\n      builder.line('rescue Faraday::Error => e')\n      builder.indent()\n      builder.line('puts \"Error: #{e.message}\"')\n      builder.outdent()\n      builder.line('end')\n    }\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, IsStringBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  language: 'rust',\n  client: 'reqwest',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('use reqwest::blocking::Client;')\n    builder.line('use std::error::Error;')\n    builder.line()\n    builder.line('fn main() -> Result<(), Box<dyn Error>> {')\n    builder.indent()\n    builder.line('let client = Client::new();')\n    builder.line()\n    builder.line('let res = client.request(reqwest::Method::' + http.method.toUpperCase() + ', \"' + http.url + '\")')\n    builder.indent()\n\n    // URL Parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('.query(&[')\n      builder.indent()\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`(\"${key}\", \"${val}\"),`)\n          }\n        } else {\n          builder.line(`(\"${key}\", \"${value}\"),`)\n        }\n      }\n      builder.outdent()\n      builder.line('])')\n    }\n\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.header(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.header(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.cookies) {\n      for (const [key, value] of Object.entries(http.cookies)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`.cookie(\"${key}\", \"${val}\")`))\n        } else {\n          builder.line(`.cookie(\"${key}\", \"${value}\")`)\n        }\n      }\n    }\n\n    if (http.body) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'form')) {\n        builder.line('.form(&')\n        builder.json(http.body)\n        builder.append(')')\n      } else if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        builder.line('.json(&')\n        builder.json(http.body)\n        builder.append(')')\n      } else if (IsStringBody(http.body)) {\n        builder.line(`.body(\"${http.body.replace(/\"/g, '\\\\\"')}\")`)\n      }\n    }\n\n    builder.line('.send()?;')\n    builder.outdent()\n\n    builder.line()\n    if (config.handleErrors) {\n      builder.line('if res.status().is_success() {')\n      builder.indent()\n      builder.line('println!(\"{}\", res.text()?);')\n      builder.outdent()\n      builder.line('} else {')\n      builder.indent()\n      builder.line('eprintln!(\"Request failed with status: {}\", res.status());')\n      builder.outdent()\n      builder.line('}')\n    } else {\n      builder.line('println!(\"{}\", res.text()?);')\n    }\n\n    builder.line('Ok(())')\n    builder.outdent()\n    builder.line('}')\n\n    return builder.output()\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\nimport { GetContentType, HasBody, IsObjectBody, ContentTypeIncludes } from '../utils/utils'\n\nexport default {\n  default: true,\n  language: 'shell',\n  client: 'curl',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || ' \\\\\\n'\n    })\n\n    // Start curl command with method and URL\n    builder.line(`curl -X ${http.method} \"${http.url}\"`)\n\n    // Everything is indented\n    builder.indent()\n\n    // Add URL parameters using -G flag\n    if (http.params) {\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`-G -d \"${key}=${val.replace(/\"/g, '\\\\\"')}\"`)\n          }\n        } else {\n          builder.line(`-G -d \"${key}=${value.replace(/\"/g, '\\\\\"')}\"`)\n        }\n      }\n    }\n\n    // Add headers\n    if (http.headers) {\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`-H \"${key}: ${val.replace(/\"/g, '\\\\\"')}\"`)\n          }\n        } else {\n          builder.line(`-H \"${key}: ${value.replace(/\"/g, '\\\\\"')}\"`)\n        }\n      }\n    }\n\n    // Add cookies\n    if (http.cookies) {\n      const cookieString = Object.entries(http.cookies)\n        .flatMap(([key, value]) => (Array.isArray(value) ? value.map((val) => `${key}=${val}`) : `${key}=${value}`))\n        .join('; ')\n      builder.line(`-b \"${cookieString}\"`)\n    }\n\n    // Add body\n    const hasContent = HasBody(http.body)\n\n    if (hasContent) {\n      const contentType = GetContentType(http.headers)\n\n      if (ContentTypeIncludes(contentType, 'json') || (!contentType && IsObjectBody(http.body))) {\n        // Pretty print JSON\n        builder.line(\"-d $'\")\n        // builder.indent()\n        builder.json(http.body)\n        builder.append(\"'\")\n      } else if (ContentTypeIncludes(contentType, 'form')) {\n        const formData = new URLSearchParams(http.body).toString().replace(/'/g, \"'\\\\''\")\n        builder.line(`-d '${formData}'`)\n      } else if (typeof http.body === 'string') {\n        const escapedBody = http.body.replace(/'/g, \"'\\\\''\")\n        builder.line(`-d '${escapedBody}'`)\n      }\n    }\n\n    // Output code\n    let output = builder.output()\n\n    // Remove the trailing backslash from the last line\n    output = output.replace(/\\\\\\s*$/, '').trim()\n\n    return output\n  }\n} as Client\n","import { Builder } from '../utils/builder'\nimport { Config, Http } from '../utils/generate'\nimport { Client } from '../utils/registry'\n\nexport default {\n  default: true,\n  language: 'swift',\n  client: 'nsurlsession',\n  generate(config: Config, http: Http): string {\n    const builder = new Builder({\n      indent: config.indent || '  ',\n      join: config.join || '\\n'\n    })\n\n    builder.line('import Foundation')\n    builder.line()\n\n    // Build URL with parameters\n    if (http.params && Object.keys(http.params).length > 0) {\n      builder.line('var urlComponents = URLComponents(string: \"' + http.url + '\")!')\n      builder.line('var queryItems: [URLQueryItem] = []')\n      for (const [key, value] of Object.entries(http.params)) {\n        if (Array.isArray(value)) {\n          for (const val of value) {\n            builder.line(`queryItems.append(URLQueryItem(name: \"${key}\", value: \"${val}\"))`)\n          }\n        } else {\n          builder.line(`queryItems.append(URLQueryItem(name: \"${key}\", value: \"${value}\"))`)\n        }\n      }\n      builder.line('urlComponents.queryItems = queryItems')\n      builder.line('let url = urlComponents.url!')\n    } else {\n      builder.line('let url = URL(string: \"' + http.url + '\")!')\n    }\n    builder.line('var request = URLRequest(url: url)')\n    builder.line('request.httpMethod = \"' + http.method.toUpperCase() + '\"')\n\n    if (http.headers && Object.keys(http.headers).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.headers)) {\n        if (Array.isArray(value)) {\n          value.forEach((val) => builder.line(`request.addValue(\"${val}\", forHTTPHeaderField: \"${key}\")`))\n        } else {\n          builder.line(`request.addValue(\"${value}\", forHTTPHeaderField: \"${key}\")`)\n        }\n      }\n    }\n\n    if (http.cookies && Object.keys(http.cookies).length > 0) {\n      builder.line()\n      for (const [key, value] of Object.entries(http.cookies)) {\n        builder.line(`request.addValue(\"${key}=${value}\", forHTTPHeaderField: \"Cookie\")`)\n      }\n    }\n\n    if (http.body) {\n      builder.line()\n      if (typeof http.body === 'string') {\n        builder.line(`let bodyString = \"${http.body.replace(/\"/g, '\\\\\"')}\"`)\n        builder.line('request.httpBody = bodyString.data(using: .utf8)')\n      } else {\n        builder.line('let bodyDict: [String: Any] = ')\n        builder.json(http.body)\n        builder.line('request.httpBody = try? JSONSerialization.data(withJSONObject: bodyDict)')\n      }\n    }\n\n    builder.line()\n    builder.line('let task = URLSession.shared.dataTask(with: request) { data, response, error in')\n    builder.indent()\n    builder.line('if let error = error {')\n    builder.indent()\n    builder.line('print(\"Error: \\\\(error)\")')\n    builder.line('return')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n\n    builder.line('if let httpResponse = response as? HTTPURLResponse {')\n    builder.indent()\n    builder.line('if httpResponse.statusCode == 200, let data = data {')\n    builder.indent()\n    builder.line('let responseString = String(data: data, encoding: .utf8)')\n    builder.line('print(responseString ?? \"No response data\")')\n    builder.outdent()\n    builder.line('} else {')\n    builder.indent()\n    builder.line('print(\"Request failed with status code: \\\\(httpResponse.statusCode)\")')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.outdent()\n    builder.line('}')\n    builder.line()\n\n    builder.line('task.resume()')\n\n    return builder.output()\n  }\n} as Client\n","import { Clients, Languages, Search, SetDefault, Register, ClearRegistry } from './utils/registry'\nimport { Generate } from './utils/generate'\nimport { Builder } from './utils/builder'\nimport { IsJsonRequest } from './utils/utils'\n\n// Types\nimport type { Client } from './utils/registry'\nimport type { Method, Settings, Config, Http } from './utils/generate'\n\n// Clients\nimport CLibCurl from './clients/c.libcurl'\nimport CSharpHttp from './clients/csharp.http'\nimport CSharpRest from './clients/csharp.restsharp'\nimport DartHttp from './clients/dart.http'\nimport Go from './clients/go'\nimport JavaHttpURLConnection from './clients/java.httpurlconnection'\nimport JavaOkHttp from './clients/java.okhttp'\nimport JSFetch from './clients/js.fetch'\nimport JSAxios from './clients/js.axios'\nimport JSJquery from './clients/js.jquery'\nimport KotlinKtor from './clients/kotlin.ktor'\nimport Node from './clients/node.http'\nimport NodeFetch from './clients/node.fetch'\nimport PHPCurl from './clients/php.curl'\nimport PHPGuzzle from './clients/php.guzzle'\nimport PythonHttp from './clients/python.http'\nimport PythonRequests from './clients/python.requests'\nimport Ruby from './clients/ruby.nethttp'\nimport RubyFaraday from './clients/ruby.faraday'\nimport RustReqwest from './clients/rust.reqwest'\nimport ShellCurl from './clients/shell.curl'\nimport SwiftNsurlsession from './clients/swift.nsurlsession'\n\n// Register all languages\nRegister(CLibCurl)\nRegister(CSharpHttp)\nRegister(CSharpRest)\nRegister(DartHttp)\nRegister(Go)\nRegister(JavaHttpURLConnection)\nRegister(JavaOkHttp)\nRegister(JSFetch)\nRegister(JSAxios)\nRegister(JSJquery)\nRegister(KotlinKtor)\nRegister(Node)\nRegister(NodeFetch)\nRegister(PHPCurl)\nRegister(PHPGuzzle)\nRegister(PythonHttp)\nRegister(PythonRequests)\nRegister(Ruby)\nRegister(RubyFaraday)\nRegister(RustReqwest)\nRegister(ShellCurl)\nRegister(SwiftNsurlsession)\n\nexport {\n  // Registry\n  Client,\n  Clients,\n  Languages,\n  Search,\n  SetDefault,\n  Register,\n  ClearRegistry,\n\n  // Generate\n  Method,\n  Settings,\n  Config,\n  Http,\n  Generate,\n\n  // Builder\n  Builder,\n\n  // Utils\n  IsJsonRequest\n}\n"],"names":["clients","Clients","Languages","c","v","i","a","Search","language","client","clientsFilter","defaultClient","clientResult","SetDefault","Register","g","curClients","exists","index","ClearRegistry","Generate","req","err","validate","setConfig","code","config","Builder","options","line","json","isSub","item","keys","key","depth","ParseUrl","url","hostname","path","port","protocol","params","parsedUrl","urlParts","pathAndParams","pathPart","paramsPart","IsJsonRequest","method","headers","GetContentType","value","HasBody","body","IsStringBody","IsObjectBody","ContentTypeIncludes","contentType","type","lower","InferContentType","GetEffectiveContentType","explicit","CLibCurl","http","builder","val","paramString","separator","paramParts","cookies","CSharpHttp","CSharpRest","DartHttp","hasBody","needsJsonEncode","bodyVar","hasHeaders","Go","isJsonBody","isFormBody","needsBytes","JavaHttpURLConnection","paramPairs","cookieString","JavaOkHttp","needsJson","JSFetch","responseType","wasInferred","parseMethod","JSAxios","JSJquery","KotlinKtor","Node","finalPath","NodeFetch","PHPCurl","escapedBody","PHPGuzzle","PythonHttp","hasPayload","hasCookies","otherParams","p","PythonRequests","Ruby","RubyFaraday","RustReqwest","ShellCurl","formData","output","SwiftNsurlsession"],"mappings":"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"}